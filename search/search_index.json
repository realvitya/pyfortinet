{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PyFortinet","text":"<p>This project is a Python library for Fortinet products' REST API. Currently, only Fortimanager is supported, but extensions for various products are planned. Current state is rather a Proof of Concept.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>FMG API</li> <li>Low level API access via passing dict to various calls (add, get, set, update, exec)</li> <li>Automatic login (Currently, only user/password authentication is supported)</li> <li>Automatic locking in workspace mode (Currently, only ADOM locking is supported)</li> <li>High level API using all kind of objects (see some examples below)<ul> <li>Only couple of objects are supported yet (being POC project), but extension is planned for most used functions!</li> <li>Task handling with waiting and callback function (to support progress bar, logging, etc.)</li> </ul> </li> <li>Async code is supported</li> </ul> <p>Planned features</p> <ul> <li>FMG API</li> <li>Extended authentication capabilities (token, SAML)</li> <li>Extended locking capabilities to support object and package level locking and fallback feature to ADOM locking</li> <li>Proxy FortiOS API calls using objects of FortiOS API</li> <li>FortiOS API</li> <li>Similar capabilities to FMG API</li> </ul>"},{"location":"developer_guide/","title":"Developer Guide","text":"<p>First, thank you for being interested in developing this library! The following topics tries to describe the intended setup and workflow to develop the library!</p>"},{"location":"developer_guide/#installing_dev_tools","title":"Installing dev tools","text":"<p>For development, you can use the project framework by installing the library with <code>dev</code> extras:</p> <pre><code># clone your fork\ngit clone https://github.com/{YOURFORK}/pyfortinet.git\n# install in edit mode\npip install -e ./pyfortinet[dev]\n</code></pre>"},{"location":"developer_guide/#using_invoke","title":"Using Invoke","text":"<p>The project uses Invoke for common tasks. You may check all tasks supported in the <code>tasks.py</code> config file.</p>"},{"location":"developer_guide/#run_linters","title":"Run linters","text":"<p>Linters are invoked by pre-commit which is installed with the dev tools.</p>"},{"location":"developer_guide/#start_mkdocs_server","title":"Start mkdocs server","text":""},{"location":"developer_guide/fmg_api_objects/","title":"Guidelines for Implementing Objects for API Calls","text":"<p>As not all API calls are implemented, I'm happily accept help with your use case implemented here. I'd like to describe the general logic of the API classes and how to develop them.</p>"},{"location":"developer_guide/fmg_api_objects/#1_which_module_to_use","title":"1. Which module to use?","text":"<p>FMG API reference and FNDN will give you the guidance where to implement new classes. For example <code>Address</code> firewall object is listed at firewall section. Therefore, any API route under the firewall section should go to module <code>pyfortinet.fmg_api.firewall</code>.</p>"},{"location":"developer_guide/fmg_api_objects/#2_api_call_type","title":"2. API call type","text":"<p>There are two predefined base class you can start your development: <code>FMGObject</code> and <code>FMGExecObject</code>. These are base classes you must inherit your class and these provides couple of common services.</p> <p>If API documentation shows <code>exec</code> operation, use the <code>FMGExecObject</code> as base class!</p>"},{"location":"developer_guide/fmg_api_objects/#3_writing_an_api_route_class","title":"3. Writing an API route class","text":"<p>Pydantic is heavily used to check and convert data. This way we ensure data quality and coherent way of handling data. For example, FMG tends to return data values as integer, but these need to be converted back to string, so it's easier for humans to understand.</p> <p>The goal of the classes to implement an object which can be easily used by the user and do only minimal initialization. The structure of a class is looking like that:</p> <pre><code>class SomeAPICall(FMGObject):\n\"\"\"Short description what this object will do\n    Attributes:\n        ...  # proper docstring for all API data\n    \"\"\"\n# mandatory private attribute initialization\n## _url usually contains {scope} which is handled by default _get_url method\n_url: str = \"/pm/config/{scope}/obj/some/route\"  # You need to specify the route for this API\n# optional private attribute initialization\n## _version is supposed to indicate minimum FMG API version support for this class (TBD)\n_version: str = \"7.2.4\"\n## other private attributes can be defined. The inherited attributes are not meant to be overridden\n#\n# API data fields\n# All of these should be Optional, except the primary key field which is indicated in the API documentation\n# Primary key for this object in FMG:\nname: str = Field(..., max_length=128)\n# Field with choices should be defined outside the class for clarity\n# E.g.: SOME_VALUES = Literal[\"value1\", \"value2\"]\nsome: Optional[SOME_VALUES] = None\n# If API field has space or dash, use underscore and utilize Pydantic 'validation_alias' and 'serialization_alias'!\n# AliasChoices is required so user can use either form!\nsome_with_space: Optional[str] = Field(None, \nvalidation_alias=AliasChoices(\"some with space\", \"some_with_space\"), \nserialization_alias=\"some with space\")\nsome_with_dash: Optional[str] = Field(None, validation_alias=AliasChoices(\"some-with-dash\", \"some_with_dash\"), \nserialization_alias=\"some-with-dash\")\n# We can use our class as a result of a different API call or when we submit data\n# There are cases when we want to use data as a result but don't want to push back as an update\n# E.g. VDOM.get with loadsubs will return device. We should not set this when try to save VDOM.\n# 'exclude' keyword can be used to not add this field to the 'add', 'update' or 'set' methods.\ndevice: str = Field(\"\", exclude=True, description=\"Assigned device (optional)\")\n#\n# Validator example field:\nsubnet: Optional[Union[str, list[str]]] = None\n# Validators are used to standardize data\n# All of these are optional, these are just examples\n@field_validator(\"subnet\")\ndef standardize_subnet(cls, v):\n\"\"\"validator: x.x.x.x/y.y.y.y -&gt; x.x.x.x/y\"\"\"\nif isinstance(v, list):\nreturn IPv4Interface(\"/\".join(v)).compressed\nelse:\nreturn IPv4Interface(v).compressed\n# Convert integer values back to string which is defined as Literal (SOME_VALUES)\n@field_validator(\"some\", mode=\"before\")\ndef validate_some(cls, v: int) -&gt; SOME_VALUES:\nreturn SOME_VALUES.__dict__.get(\"__args__\")[v] if isinstance(v, int) else v\n# When check cannot be executed before instantiation of the class, we can post-check on the object\n# The following example changes field 'device' field based on the 'action' field.\n@model_validator(mode=\"after\")\ndef validate_devicejob(self) -&gt; \"DeviceTask\":\n\"\"\"Validate device job\"\"\"\nself._url = self._url.replace(\"{action}\", self.action)\nif self.action == \"del\":\nself.device = self.device.name  # deleting a device requires device id or name\nreturn self\n</code></pre>"},{"location":"developer_guide/fmg_api_objects/#url_handling","title":"URL handling","text":"<p>The mandatory private attribute to implement is the <code>_url</code>. This defines the API route. It can have dynamic path, which is derived by the <code>get_url</code> property. The built-in <code>FMGObject.get_url</code> will look for <code>{scope}</code> string in the URL and will replace it with the <code>_scope</code> attribute.</p> <p>This <code>_scope</code> attribute is uninitialized by default if the object is instantiated directly from the class. If it remains uninitialized, when the object is used by <code>FMG</code> high-level object, it will use its own set scope instead.</p> <p>object scope</p> <p>If you set a scope for the object, it will use that scope only! Object level scope overrides FMG scope (adom).</p>"},{"location":"developer_guide/fmg_api_objects/#version_handling","title":"Version handling","text":"<p>TBD, not implemented yet</p>"},{"location":"developer_guide/fmg_api_objects/#field_validation","title":"Field validation","text":"<p>All fields can be validated using Pydantic arsenal. The above example describes some use-cases.</p> <p>You can check Pydantic model usage or Pydantic Field usage for more information and examples. Using the <code>Field</code> value you can fine-tune the already specified type with more constraints. For example by strings, it's possible to add regex constraint. If anytime a validation fails, the object instantiation will raise a <code>ValidationError</code> exception.</p>"},{"location":"developer_guide/fmg_api_objects/#mandatory_field_handling","title":"Mandatory field handling","text":"<p>As a thumb rule, all field should be optional, because the class we define can be a result of an API get call, or we just want to create an object with certain otherwise optional fields. There is one exception when we should set a field mandatory: When API docs mention a field as primary key, then this field must be filled in every case, and it's just better to have it defined in our code as well.</p> <p>In Pydantic, there are two ways of defining mandatory fields:</p> <p>1.By not specifying <code>Optional</code> type hinting and/or default value</p> <pre><code>some: str\n</code></pre> <p>2.By using <code>Field</code> constraint with <code>...</code> (Ellipse) as default value</p> <pre><code>some_other: str = Field(..., validation_alias=AliasChoices(\"some other\", \"some_other\"), serialization_alias=\"some other\")\n</code></pre>"},{"location":"developer_guide/fmg_api_objects/#class_inheritance","title":"Class inheritance","text":"<p>There are cases when two API data is very similar and only slight differences need to be defined. In that case it's easier to define a base and more general model and inherit from it the more specific ones. Such an example is <code>BaseDevice</code> which is the parent of <code>Device</code>. Differences are the default values and mandatory fields.</p>"},{"location":"developer_guide/fmg_api_objects/#4_writing_tests_for_the_new_class","title":"4. Writing tests for the new class","text":"<p>Each module should have its own test file. Please create such test-cases that the following rules are applied:</p> <ol> <li>Cover all use-cases of your class.<ol> <li>create using kwargs</li> <li>create using FMG object</li> <li>test all methods</li> </ol> </li> <li>There should be no leftover on the FMG after proper test-run! (cleanup!)</li> <li>Utilize existing fixtures to access lab environment</li> </ol> <p>Tip</p> <p>Best to check out existing test cases and work based on those!</p>"},{"location":"developer_guide/fmg_api_objects/#5_ensure_proper_documentation_in_docstrings_and_docs_folder_if_necessary","title":"5. Ensure proper documentation in docstrings and <code>docs</code> folder if necessary","text":"<p>This project uses Google docstring format and Markdown to enhance documentation.</p>"},{"location":"developer_guide/fmg_api_objects/#6_run_linters_to_standardize_and_polish_new_code","title":"6. Run linters to standardize and polish new code","text":""},{"location":"developer_guide/lab_setup/","title":"Lab setup for testing","text":"<p>In order to run all tests, you need a lab environment where you can freely create and delete objects. This guide is about to give you a guidance how to set up such a lab.</p>"},{"location":"developer_guide/lab_setup/#virtual_lab","title":"Virtual lab","text":"<p>In case you have no real lab at your disposal, you can run test on virtual machines. On Windows, Hyper-V is a convenient solution. You have to make sure you can access the devices from your desktop and also that devices can access each other.</p>"},{"location":"developer_guide/lab_setup/#fmg_setup","title":"FMG setup","text":"<p>It is advisable to have a separate testing ADOM with workspace mode enabled. This way - during development - no errors would leave garbage in the configuration. <code>Workspace</code> mode tests will discard changes done on FMG. All this is not a requirement, but makes development easy. <code>Workflow</code> mode is not tested and most probably won't work.</p>"},{"location":"developer_guide/testing/","title":"Test guide","text":""},{"location":"developer_guide/testing/#testing_config_file","title":"Testing config file","text":"<p>It is advisable to put all lab related configs and files to a separate folder which is not part of the GIT repository. I used to use private folder which is excepted from GIT. In that folder you can store your config files. One of the most important config file is <code>lab-config.yml</code>. This file contains access to your lab environment.</p> <p>Example of <code>lab-config.yml</code> file:</p> <pre><code>---\nfmg:\nbase_url: https://myfmg.co.com/\nverify: false\nusername: admin\npassword: verysecret\nadom: root\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>exceptions</li> <li>fmg_api<ul> <li>async_fmg</li> <li>async_fmgbase</li> <li>common</li> <li>dvmcmd</li> <li>dvmdb</li> <li>firewall</li> <li>fmg</li> <li>fmgbase</li> <li>pm_config_cli</li> <li>policy</li> <li>securityconsole</li> <li>task</li> </ul> </li> <li>settings</li> </ul>"},{"location":"reference/exceptions/","title":"exceptions","text":"<p>FMG API exceptions</p>"},{"location":"reference/exceptions/#exceptions.FMGAuthenticationException","title":"FMGAuthenticationException","text":"<p>             Bases: <code>FMGException</code></p> <p>Authentication error</p>"},{"location":"reference/exceptions/#exceptions.FMGConfigurationException","title":"FMGConfigurationException","text":"<p>             Bases: <code>FMGException</code></p> <p>FMG configuration problem</p>"},{"location":"reference/exceptions/#exceptions.FMGEmptyResultException","title":"FMGEmptyResultException","text":"<p>             Bases: <code>FMGException</code></p> <p>No result for a request</p>"},{"location":"reference/exceptions/#exceptions.FMGException","title":"FMGException","text":"<p>             Bases: <code>Exception</code></p> <p>General FMG error</p>"},{"location":"reference/exceptions/#exceptions.FMGInvalidDataException","title":"FMGInvalidDataException","text":"<p>             Bases: <code>FMGException</code></p> <p>The data is invalid for selected url</p>"},{"location":"reference/exceptions/#exceptions.FMGInvalidURL","title":"FMGInvalidURL","text":"<p>             Bases: <code>FMGException</code></p> <p>Invalid URL</p>"},{"location":"reference/exceptions/#exceptions.FMGLockException","title":"FMGLockException","text":"<p>             Bases: <code>FMGException</code></p> <p>Locking error</p>"},{"location":"reference/exceptions/#exceptions.FMGLockNeededException","title":"FMGLockNeededException","text":"<p>             Bases: <code>FMGException</code></p> <p>Lock needed error</p>"},{"location":"reference/exceptions/#exceptions.FMGMissingScopeException","title":"FMGMissingScopeException","text":"<p>             Bases: <code>FMGException</code></p> <p>Scope must be set before referencing URL</p>"},{"location":"reference/exceptions/#exceptions.FMGNotAssignedException","title":"FMGNotAssignedException","text":"<p>             Bases: <code>FMGException</code></p> <p>FMG not assigned to object</p>"},{"location":"reference/exceptions/#exceptions.FMGObjectAlreadyExistsException","title":"FMGObjectAlreadyExistsException","text":"<p>             Bases: <code>FMGException</code></p> <p>The object is already in the database</p>"},{"location":"reference/exceptions/#exceptions.FMGTokenException","title":"FMGTokenException","text":"<p>             Bases: <code>FMGException</code></p> <p>No Token error</p>"},{"location":"reference/exceptions/#exceptions.FMGUnhandledException","title":"FMGUnhandledException","text":"<p>             Bases: <code>FMGException</code></p> <p>Unhandled error</p>"},{"location":"reference/exceptions/#exceptions.FMGWrongRequestException","title":"FMGWrongRequestException","text":"<p>             Bases: <code>FMGException</code></p> <p>Locking error</p>"},{"location":"reference/settings/","title":"settings","text":"<p>Fortimanager settings</p>"},{"location":"reference/settings/#settings.FMGSettings","title":"FMGSettings","text":"<p>             Bases: <code>BaseSettings</code></p> <p>Fortimanager settings</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>str</code> <p>Base URL to access FMG (e.g.: https://myfmg/jsonrpc)</p> <code>username</code> <code>str</code> <p>User to authenticate</p> <code>password</code> <code>str</code> <p>Password for authentication</p> <code>adom</code> <code>str</code> <p>ADOM to use for this connection</p> <code>verify</code> <code>bool</code> <p>Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)</p> <code>timeout</code> <code>float</code> <p>Connection timeout for requests in seconds</p> <code>raise_on_error</code> <code>bool</code> <p>Raise exception on error</p>"},{"location":"reference/settings/#settings.FMGSettings.check_base_url","title":"check_base_url","text":"<pre><code>check_base_url(v: str)\n</code></pre> <p>check and fix base_url</p> Source code in <code>pyfortinet/settings.py</code> <pre><code>@field_validator(\"base_url\", mode=\"before\")\ndef check_base_url(cls, v: str):\n\"\"\"check and fix base_url\"\"\"\nv = v.rstrip(\"/ \")\nif not v.endswith(\"/jsonrpc\"):\nv += \"/jsonrpc\"\nreturn HttpUrl(v)\n</code></pre>"},{"location":"reference/fmg_api/__init__/","title":"fmg_api","text":"<p>FMG API library</p>"},{"location":"reference/fmg_api/__init__/#fmg_api.AnyFMG","title":"AnyFMG  <code>module-attribute</code>","text":"<pre><code>AnyFMG = Union[FMG, AsyncFMG]\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.AnyFMGObject","title":"AnyFMGObject  <code>module-attribute</code>","text":"<pre><code>AnyFMGObject = TypeVar('AnyFMGObject', FMGObject, FMGExecObject)\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.GetOption","title":"GetOption  <code>module-attribute</code>","text":"<pre><code>GetOption = Literal['extra info', 'assignment info', 'loadsub', 'no loadsub', 'count', 'syntax', 'devinfo', 'obj flags', 'datasrc', 'chksum']\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGBaseObject","title":"FMGBaseObject","text":"<pre><code>FMGBaseObject(*args, **kwargs)\n</code></pre> <p>             Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Abstract base object for all high-level objects</p> <p>Scope must be set before referencing the url! It's done by FMGBase requests as it defaults all objects to its selected ADOM.</p> <p>In case of AsyncFMG, caller must ensure await-ing the request.</p> <p>Attributes:</p> Name Type Description <code>fmg_scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>_version</code> <code>str</code> <p>Supported API version</p> <code>_url</code> <code>str</code> <p>template for API URL</p> <code>_fmg</code> <code>FMG</code> <p>FMG instance</p> <p>Other Parameters:</p> Name Type Description <code>scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>fmg</code> <code>AnyFMG</code> <p>FMG instance</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\n\"\"\"Initialize FMGObject\n    Keyword Args:\n        scope (str): FMG selected scope (adom or global)\n        fmg (AnyFMG): FMG instance\n    \"\"\"\nsuper().__init__(*args, **kwargs)\nself.fmg_scope = kwargs.get(\"fmg_scope\")\nself._fmg: \"AnyFMG\" = kwargs.get(\"fmg\")\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGBaseObject.fmg_scope","title":"fmg_scope  <code>property</code> <code>writable</code>","text":"<pre><code>fmg_scope: str\n</code></pre> <p>Object scope (adom)</p>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGBaseObject.get_url","title":"get_url  <code>property</code>","text":"<pre><code>get_url: str\n</code></pre> <p>General API URL assembly</p> <p>To be overridden by more complex API URLs in different classes</p>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGExecObject","title":"FMGExecObject","text":"<pre><code>FMGExecObject(*args, **kwargs)\n</code></pre> <p>             Bases: <code>FMGBaseObject</code>, <code>ABC</code></p> <p>FMG execute job type</p> <p>Attributes:</p> Name Type Description <code>scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>_version</code> <code>str</code> <p>Supported API version</p> <code>_url</code> <code>str</code> <p>template for API URL</p> <code>_fmg</code> <code>FMG</code> <p>FMG instance</p> <p>Other Parameters:</p> Name Type Description <code>scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>fmg</code> <code>AnyFMG</code> <p>FMG instance</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\n\"\"\"Initialize FMGObject\n    Keyword Args:\n        scope (str): FMG selected scope (adom or global)\n        fmg (AnyFMG): FMG instance\n    \"\"\"\nsuper().__init__(*args, **kwargs)\nself.fmg_scope = kwargs.get(\"fmg_scope\")\nself._fmg: \"AnyFMG\" = kwargs.get(\"fmg\")\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGExecObject.exec","title":"exec","text":"<pre><code>exec()\n</code></pre> <p>Exec FMG operation on this object</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def exec(self):\n\"\"\"Exec FMG operation on this object\"\"\"\nif self._fmg:\nreturn self._fmg.exec(self)\nraise FMGNotAssignedException\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGObject","title":"FMGObject","text":"<pre><code>FMGObject(*args, **kwargs)\n</code></pre> <p>             Bases: <code>FMGBaseObject</code>, <code>ABC</code></p> <p>Abstract base object for all high-level objects</p> <p>Scope must be set before referencing the url! It's done by FMGBase requests as it defaults all objects to its selected ADOM.</p> <p>In case of AsyncFMG, caller must ensure await-ing the request.</p> <p>Attributes:</p> Name Type Description <code>scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>_version</code> <code>str</code> <p>Supported API version</p> <code>_url</code> <code>str</code> <p>template for API URL</p> <code>_fmg</code> <code>FMG</code> <p>FMG instance</p> <p>Other Parameters:</p> Name Type Description <code>scope</code> <code>str</code> <p>FMG selected scope (adom or global)</p> <code>fmg</code> <code>AnyFMG</code> <p>FMG instance</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def __init__(self, *args, **kwargs) -&gt; None:\n\"\"\"Initialize FMGObject\n    Keyword Args:\n        scope (str): FMG selected scope (adom or global)\n        fmg (AnyFMG): FMG instance\n    \"\"\"\nsuper().__init__(*args, **kwargs)\nself.fmg_scope = kwargs.get(\"fmg_scope\")\nself._fmg: \"AnyFMG\" = kwargs.get(\"fmg\")\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGObject.add","title":"add","text":"<pre><code>add()\n</code></pre> <p>Add this object to FMG</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def add(self):\n\"\"\"Add this object to FMG\"\"\"\nif self._fmg:\nreturn self._fmg.add(self)\nraise FMGNotAssignedException\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGObject.delete","title":"delete","text":"<pre><code>delete()\n</code></pre> <p>Delete FMG operation on this object</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def delete(self):\n\"\"\"Delete FMG operation on this object\"\"\"\nif self._fmg:\nreturn self._fmg.delete(self)\nraise FMGNotAssignedException\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGObject.set","title":"set","text":"<pre><code>set()\n</code></pre> <p>Set FMG operation on this object</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def set(self):\n\"\"\"Set FMG operation on this object\"\"\"\nif self._fmg:\nreturn self._fmg.set(self)\nraise FMGNotAssignedException\n</code></pre>"},{"location":"reference/fmg_api/__init__/#fmg_api.FMGObject.update","title":"update","text":"<pre><code>update()\n</code></pre> <p>Update FMG operation on this object</p> Source code in <code>pyfortinet/fmg_api/__init__.py</code> <pre><code>def update(self):\n\"\"\"Update FMG operation on this object\"\"\"\nif self._fmg:\nreturn self._fmg.update(self)\nraise FMGNotAssignedException\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/","title":"async_fmg","text":"<p>FMG API for humans</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG","title":"AsyncFMG","text":"<pre><code>AsyncFMG(settings: Optional[FMGSettings] = None, **kwargs)\n</code></pre> <p>             Bases: <code>AsyncFMGBase</code></p> <p>FMG API for humans</p> <p>Goal of this class to provide easy access to FMG features. This extends the base class capabilities with easy to use methods.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>FortiManager settings</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>base_url</code> <code>str</code> <p>Base URL to access FMG (e.g.: https://myfmg/jsonrpc)</p> <code>username</code> <code>str</code> <p>User to authenticate</p> <code>password</code> <code>str</code> <p>Password for authentication</p> <code>adom</code> <code>str</code> <p>ADOM to use for this connection</p> <code>verify</code> <code>bool</code> <p>Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)</p> <code>timeout</code> <code>float</code> <p>Connection timeout for requests in seconds</p> <code>raise_on_error</code> <code>bool</code> <p>Raise exception on error</p> <code>discard_on_close</code> <code>bool</code> <p>Discard changes after connection close (workspace mode)</p> <code>discard_on_error</code> <code>bool</code> <p>Discard changes when exception occurs (workspace mode)</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>def __init__(self, settings: Optional[FMGSettings] = None, **kwargs):\n\"\"\"Initializes FMG\n    Args:\n        settings (Settings): FortiManager settings\n    Keyword Args:\n        base_url (str): Base URL to access FMG (e.g.: https://myfmg/jsonrpc)\n        username (str): User to authenticate\n        password (str): Password for authentication\n        adom (str): ADOM to use for this connection\n        verify (bool): Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)\n        timeout (float): Connection timeout for requests in seconds\n        raise_on_error (bool): Raise exception on error\n        discard_on_close (bool): Discard changes after connection close (workspace mode)\n        discard_on_error (bool): Discard changes when exception occurs (workspace mode)\n    \"\"\"\nsuper().__init__(settings, **kwargs)\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.add","title":"add  <code>async</code>","text":"<pre><code>add(request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse\n</code></pre> <p>Add operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Add operation's data structure or object</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.add--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def add_request(request: dict[str,Any]):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.add(address_request)\n&gt;&gt;&gt; asyncio.run(add_request(address_request))\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.add--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; async def add_request(addr):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.add(addr)\n&gt;&gt;&gt; asyncio.run(add_request(address))\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def add(self, request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse:\n\"\"\"Add operation\n    Args:\n        request: Add operation's data structure or object\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def add_request(request: dict[str,Any]):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.add(address_request)\n        &gt;&gt;&gt; asyncio.run(add_request(address_request))\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; async def add_request(addr):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.add(addr)\n        &gt;&gt;&gt; asyncio.run(add_request(address))\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nif isinstance(request, dict):  # dict input, low-level operation\nreturn await super().add(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn await super().add(request={\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(request: Union[dict[str, str], FMGObject]) -&gt; AsyncFMGResponse\n</code></pre> <p>Delete operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, str], FMGObject]</code> <p>dict or object to delete</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.delete--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n... }\n&gt;&gt;&gt; async def delete_address(address_request):\n...     async with AsyncFMG(**settings) as fmg:\n...         await fmg.delete(address_request)\n&gt;&gt;&gt; asyncio.run(delete_address(address_request))\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.delete--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\")\n&gt;&gt;&gt; async def delete_address(addr):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.delete(addr)\n&gt;&gt;&gt; asyncio.run(delete_address(address))\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def delete(self, request: Union[dict[str, str], FMGObject]) -&gt; AsyncFMGResponse:\n\"\"\"Delete operation\n    Args:\n        request: dict or object to delete\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n        ... }\n        &gt;&gt;&gt; async def delete_address(address_request):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         await fmg.delete(address_request)\n        &gt;&gt;&gt; asyncio.run(delete_address(address_request))\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\")\n        &gt;&gt;&gt; async def delete_address(addr):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.delete(addr)\n        &gt;&gt;&gt; asyncio.run(delete_address(address))\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn await super().delete(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\nreturn await super().delete(\n{\"url\": f\"{request.get_url}/{request.name}\"}\n)  # assume URL with name for del operation\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.exec","title":"exec  <code>async</code>","text":"<pre><code>exec(request: Union[dict[str, Any], FMGExecObject]) -&gt; AsyncFMGResponse\n</code></pre> <p>Execute on FMG</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def exec(self, request: Union[dict[str, Any], FMGExecObject]) -&gt; AsyncFMGResponse:\n\"\"\"Execute on FMG\"\"\"\nif isinstance(request, dict):  # low-level operation\nreturn await super().exec(request)\nelif isinstance(request, FMGExecObject):\nlogger.info(\"requesting exec with high-level op to %s\", request.get_url)\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\nreturn await super().exec({\"url\": request.get_url, \"data\": request.data})\nelse:\nresult = AsyncFMGResponse(\nfmg=self, data={\"error\": f\"Wrong type of request received: {request}\"}, status=400\n)\nlogger.error(result.data[\"error\"])\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.get","title":"get  <code>async</code>","text":"<pre><code>get(request: Union[dict[str, Any], Type[FMGObject]], filters: FILTER_TYPE = None, scope: Optional[str] = None, fields: Optional[List[str]] = None, loadsub: bool = True, options: Optional[List[GetOption]] = None) -&gt; AsyncFMGResponse\n</code></pre> <p>Get info from FMG</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], Type[FMGObject]]</code> <p>Get operation's data structure</p> required <code>scope</code> <code>Optional[str]</code> <p>Scope where the object is searched (defaults to FMG setting on connection)</p> <code>None</code> <code>filters</code> <code>FILTER_TYPE</code> <p>Filter expression</p> <code>None</code> <code>fields</code> <code>Optional[List[str]]</code> <p>Fields to return (default: None means all fields)</p> <code>None</code> <code>loadsub</code> <code>bool</code> <p>Load sub objects</p> <code>True</code> <code>options</code> <code>Optional[List[GetOption]]</code> <p>API request options</p> <code>None</code> <p>Examples:</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.get--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; address_request = {\n...    \"url\": \"/pm/config/global/obj/firewall/address\",\n...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n...    \"fields\": [ \"name\", \"subnet\" ]\n...}\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; async def get_address(request: dict[str, Any]):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.get(address_request)\n&gt;&gt;&gt; asyncio.run(get_address())\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.get--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; from pyfortinet.fmg_api.common import F\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; async def get_address():\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.get(Address, F(name__like=\"test-%\") &amp; F(subnet=\"test-subnet\"))\n&gt;&gt;&gt; asyncio.run(get_address())\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>response object with data</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>@auth_required\nasync def get(\nself,\nrequest: Union[dict[str, Any], Type[FMGObject]],\nfilters: FILTER_TYPE = None,\nscope: Optional[str] = None,\nfields: Optional[List[str]] = None,\nloadsub: bool = True,\noptions: Optional[List[GetOption]] = None,\n) -&gt; AsyncFMGResponse:\n\"\"\"Get info from FMG\n    Args:\n        request: Get operation's data structure\n        scope: Scope where the object is searched (defaults to FMG setting on connection)\n        filters: Filter expression\n        fields: Fields to return (default: None means all fields)\n        loadsub: Load sub objects\n        options: API request options\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; address_request = {\n        ...    \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n        ...    \"fields\": [ \"name\", \"subnet\" ]\n        ...}\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; async def get_address(request: dict[str, Any]):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.get(address_request)\n        &gt;&gt;&gt; asyncio.run(get_address())\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; from pyfortinet.fmg_api.common import F\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; async def get_address():\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.get(Address, F(name__like=\"test-%\") &amp; F(subnet=\"test-subnet\"))\n        &gt;&gt;&gt; asyncio.run(get_address())\n        ```\n    Returns:\n        (AsyncFMGResponse): response object with data\n    \"\"\"\n# Call base function for base arguments\nif isinstance(request, dict):\nreturn await super().get(request)\n# High level arguments\nresult = AsyncFMGResponse(fmg=self)\nif issubclass(request, FMGObject):\n# derive url from current scope and adom\nif not scope:  # get adom from FMG settings\nscope = \"global\" if self._settings.adom == \"global\" else f\"adom/{self._settings.adom}\"\nelse:  # user specified\nscope = \"global\" if scope == \"global\" else f\"adom/{scope}\"\nurl = request._url.default.replace(\"{scope}\", scope)\nif self._settings.adom != \"global\":\nurl = url.replace(\"{adom}\", f\"/adom/{self._settings.adom}\")\nelse:\nurl = url.replace(\"{adom}\", \"\")\napi_request = {\n\"loadsub\": 1 if loadsub else 0,\n}\nif filters:\napi_request[\"filter\"] = self._get_filter_list(filters)\nif options:\napi_request[\"option\"] = options\nbody = {\n\"method\": \"get\",\n\"params\": [{\"url\": url, **api_request}],\n\"verbose\": 1,\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\nelse:\nresult.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresult.status = 400\nlogger.error(result.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(result)\nreturn result\ntry:\napi_result = await self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresult.data = api_result\nreturn result\n# No need for the following. Pydantic \"alias\" can be used to handle space or dash in keys!\n# converting API names to object names (replace '-' and ' ' -&gt; _)\n# obj_model = [\n#     {key.replace(\"-\", \"_\").replace(\" \", \"_\"): value for key, value in data.items()}\n#     for data in api_result.get(\"data\")\n# ]\n# construct object list\nobjects = []\nfor value in api_result.get(\"data\"):\nobjects.append(request(**value, scope=scope, fmg=self))\nresult.data = objects\nresult.success = True\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.get_adom_list","title":"get_adom_list  <code>async</code>","text":"<pre><code>get_adom_list(filters: FILTER_TYPE = None) -&gt; Optional[List[str]]\n</code></pre> <p>Gather adoms from FMG</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>FILTER_TYPE</code> <p>filter as list or F object</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>list of adom strings or None in case of error</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def get_adom_list(self, filters: FILTER_TYPE = None) -&gt; Optional[List[str]]:\n\"\"\"Gather adoms from FMG\n    Args:\n        filters: filter as list or F object\n    Returns:\n        list of adom strings or None in case of error\n    \"\"\"\nrequest = {\"url\": \"/dvmdb/adom\", \"fields\": [\"name\"]}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\nresponse: AsyncFMGResponse = await self.get(request)\nif response.success:\nreturn [adom.get(\"name\") for adom in response.data.get(\"data\")]\nreturn None\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.get_obj","title":"get_obj","text":"<pre><code>get_obj(obj: Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject], **kwargs: Dict[str, Any]) -&gt; AnyFMGObject\n</code></pre> <p>Get an object and tie it to this FMG</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject]</code> <p>Any type or instance of FMGObject or FMGExecObject</p> required <code>kwargs</code> <code>Dict[str, Any]</code> <p>fields for the new object initialization</p> <code>{}</code> <p>Returns:</p> Type Description <code>AnyFMGObject</code> <p>New object, tied to this FMG</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>def get_obj(\nself, obj: Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject], **kwargs: Dict[str, Any]\n) -&gt; AnyFMGObject:\n\"\"\"Get an object and tie it to this FMG\n    Arguments:\n        obj: Any type or instance of FMGObject or FMGExecObject\n        kwargs: fields for the new object initialization\n    Returns:\n        (AnyFMGObject): New object, tied to this FMG\n    \"\"\"\nif isinstance(obj, Union[FMGObject, FMGExecObject]):\nobj._fmg = self\nreturn obj\nelif isclass(obj) and issubclass(obj, Union[FMGObject, FMGExecObject]):\nreturn obj(fmg=self, **kwargs)\nraise TypeError(f\"Argument {obj} is not an FMGObject or FMGExecObject type\")\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.set","title":"set  <code>async</code>","text":"<pre><code>set(request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse\n</code></pre> <p>Set operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Update operation's data structure</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.set--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def set_address(request):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.set(request)\n&gt;&gt;&gt; asyncio.run(set_address(address_request))\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.set--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; async def set_address(request):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.set(request)\n&gt;&gt;&gt; asyncio.run(set_address(address))\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def set(self, request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse:\n\"\"\"Set operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def set_address(request):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.set(request)\n        &gt;&gt;&gt; asyncio.run(set_address(address_request))\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; async def set_address(request):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.set(request)\n        &gt;&gt;&gt; asyncio.run(set_address(address))\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn await super().set(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn await super().set({\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.update","title":"update  <code>async</code>","text":"<pre><code>update(request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse\n</code></pre> <p>Update operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Update operation's data structure</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.update--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def update_address(request):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.update(request)\n&gt;&gt;&gt; asyncio.run(update_address(address_request))\n</code></pre>"},{"location":"reference/fmg_api/async_fmg/#fmg_api.async_fmg.AsyncFMG.update--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; async def update_address(addr):\n...     async with AsyncFMG(**settings) as fmg:\n...         return await fmg.update(addr)\n&gt;&gt;&gt; asyncio.run(update_address(address))\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmg.py</code> <pre><code>async def update(self, request: Union[dict[str, Any], FMGObject]) -&gt; AsyncFMGResponse:\n\"\"\"Update operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def update_address(request):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.update(request)\n        &gt;&gt;&gt; asyncio.run(update_address(address_request))\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; async def update_address(addr):\n        ...     async with AsyncFMG(**settings) as fmg:\n        ...         return await fmg.update(addr)\n        &gt;&gt;&gt; asyncio.run(update_address(address))\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn await super().update(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn await super().update({\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/","title":"async_fmgbase","text":"<p>Async FMGBase connection</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase","title":"AsyncFMGBase","text":"<pre><code>AsyncFMGBase(settings: Optional[FMGSettings] = None, **kwargs)\n</code></pre> <p>Fortimanager connection class</p> <p>This can be used as a connection handler for the FortiManager. It maintains state of operation and provides functions to communicate with the FMG.</p> <p>Attributes:</p> Name Type Description <code>lock</code> <code>AsyncFMGLockContext</code> <p>Workspace lock handler</p> <p>Examples:</p> <p>Possible arguments to initialize: FMGSettings</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase--using_as_context_manager","title":"Using as context manager","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; async def get_version(**settings):\n...     async with AsyncFMGBase(**settings) as conn:\n...         print(await conn.get_version())\n&gt;&gt;&gt; asyncio.run(get_version())\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase--using_as_function","title":"Using as function:","text":"<pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pyfortinet.exceptions import FMGException\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; async def get_version(**settings):\n...     conn = AsyncFMGBase(**settings)\n...     try:\n...         await conn.open()\n...         print(await conn.get_version())\n...     except FMGException as err:\n...         print(f\"Error: {err}\")\n...     finally:\n...         await conn.close()\n&gt;&gt;&gt; asyncio.run(get_version())\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>FortiManager settings</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>base_url</code> <code>str</code> <p>Base URL to access FMG (e.g.: https://myfmg/jsonrpc)</p> <code>username</code> <code>str</code> <p>User to authenticate</p> <code>password</code> <code>str</code> <p>Password for authentication</p> <code>adom</code> <code>str</code> <p>ADOM to use for this connection</p> <code>verify</code> <code>bool</code> <p>Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)</p> <code>timeout</code> <code>float</code> <p>Connection timeout for requests in seconds</p> <code>raise_on_error</code> <code>bool</code> <p>Raise exception on error</p> <code>discard_on_close</code> <code>bool</code> <p>Discard changes after connection close (workspace mode)</p> <code>discard_on_error</code> <code>bool</code> <p>Discard changes when exception occurs (workspace mode)</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>def __init__(self, settings: Optional[FMGSettings] = None, **kwargs):\n\"\"\"Initializes FMGBase\n    Args:\n        settings (Settings): FortiManager settings\n    Keyword Args:\n        base_url (str): Base URL to access FMG (e.g.: https://myfmg/jsonrpc)\n        username (str): User to authenticate\n        password (str): Password for authentication\n        adom (str): ADOM to use for this connection\n        verify (bool): Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)\n        timeout (float): Connection timeout for requests in seconds\n        raise_on_error (bool): Raise exception on error\n        discard_on_close (bool): Discard changes after connection close (workspace mode)\n        discard_on_error (bool): Discard changes when exception occurs (workspace mode)\n    \"\"\"\ntry:\nimport aiohttp\nexcept ModuleNotFoundError:\nraise Exception(\"Please install aiohttp or pip install pyfortinet[async]!\")\nif not settings:\nsettings = FMGSettings(**kwargs)\nself._settings = settings\nself._token: Optional[SecretStr] = None\nself._session: Optional[aiohttp.ClientSession] = None\nself.lock = AsyncFMGLockContext(self)\nself._raise_on_error: bool = settings.raise_on_error\nself._id: int = randint(1, 256)  # pick a random id for this session (check logs for a particular session)\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.adom","title":"adom  <code>property</code> <code>writable</code>","text":"<pre><code>adom: str\n</code></pre> <p>Returns current selected adom</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.discard_on_close","title":"discard_on_close  <code>property</code> <code>writable</code>","text":"<pre><code>discard_on_close: bool\n</code></pre> <p>Returns discard_on_close value</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.raise_on_error","title":"raise_on_error  <code>property</code> <code>writable</code>","text":"<pre><code>raise_on_error\n</code></pre> <p>Returns raise_on_error value</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.add","title":"add  <code>async</code>","text":"<pre><code>add(request: dict[str, Any]) -&gt; AsyncFMGResponse\n</code></pre> <p>Add operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Add operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def add_request(request: dict[str,Any]):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         return await fmg.add(address_request)\n&gt;&gt;&gt; asyncio.run(add_request(address_request))\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\n@lock\nasync def add(self, request: dict[str, Any]) -&gt; AsyncFMGResponse:\n\"\"\"Add operation\n    Args:\n        request: Add operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def add_request(request: dict[str,Any]):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         return await fmg.add(address_request)\n        &gt;&gt;&gt; asyncio.run(add_request(address_request))\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nbody = {\n\"method\": \"add\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = await self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in add request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.close","title":"close  <code>async</code>","text":"<pre><code>close(discard_changes: bool = False)\n</code></pre> <p>close connection</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def close(self, discard_changes: bool = False):\n\"\"\"close connection\"\"\"\n# Logout and expire token\nrequest = {\n\"id\": self._id,\n\"method\": \"exec\",\n\"params\": [{\"url\": \"/sys/logout\"}],\n\"session\": self._token.get_secret_value(),\n}\nself._settings.discard_on_close = self._settings.discard_on_close or discard_changes\ntry:\ntry:\nif self.lock.uses_workspace:\nif not self.discard_on_close:\nawait self.lock.commit_changes()\nawait self.lock.unlock_adoms()\nexcept FMGException:  # go ahead and ensure logout regardless we could unlock\npass\nreq = await self._session.post(\nstr(self._settings.base_url), json=request, ssl=self._settings.verify, timeout=self._settings.timeout\n)\nstatus = (await req.json()).get(\"result\", [{}])[0].get(\"status\", {})\nif status.get(\"code\") != 0:\nlogger.warning(\"Logout failed!\")\nexcept aiohttp.ClientConnectorError:\nlogger.warning(\"Logout failed!\")\nfinally:\nawait self._session.close()\nself._token = None\nlogger.debug(\"Closed session\")\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(request: dict[str, str]) -&gt; AsyncFMGResponse\n</code></pre> <p>Delete operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, str]</code> <p>Update operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n... }\n&gt;&gt;&gt; async def delete_address(request):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         await fmg.delete(address_request)\n&gt;&gt;&gt; asyncio.run(delete_address(address_request))\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\n@lock\nasync def delete(self, request: dict[str, str]) -&gt; AsyncFMGResponse:\n\"\"\"Delete operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n        ... }\n        &gt;&gt;&gt; async def delete_address(request):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         await fmg.delete(address_request)\n        &gt;&gt;&gt; asyncio.run(delete_address(address_request))\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nbody = {\n\"method\": \"delete\",\n\"params\": [\n{\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = await self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.exec","title":"exec  <code>async</code>","text":"<pre><code>exec(request: dict[str, str]) -&gt; AsyncFMGResponse\n</code></pre> <p>Execute on FMG</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\nasync def exec(self, request: dict[str, str]) -&gt; AsyncFMGResponse:\n\"\"\"Execute on FMG\"\"\"\nlogger.info(\"requesting exec with low-level op to %s\", request.get(\"url\"))\nbody = {\n\"method\": \"exec\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = await self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in exec request: %s\", api_result[\"error\"])\nresult = AsyncFMGResponse(fmg=self, data=api_result, success=api_result.get(\"status\", {}).get(\"code\") == 0)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.get","title":"get  <code>async</code>","text":"<pre><code>get(request: dict[str, Any]) -&gt; AsyncFMGResponse\n</code></pre> <p>Get info from FMG</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Get operation's param structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; address_request = {\n...    \"url\": \"/pm/config/global/obj/firewall/address\",\n...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n...    \"fields\": [ \"name\", \"subnet\" ]\n... }\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; async def get_address(request: dict[str, Any]):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         return await fmg.get(address_request)\n&gt;&gt;&gt; asyncio.run(get_address())\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>response object with data</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\nasync def get(self, request: dict[str, Any]) -&gt; AsyncFMGResponse:  # noqa: PLR0912 - Too many branches\n\"\"\"Get info from FMG\n    Args:\n        request: Get operation's param structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; address_request = {\n        ...    \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n        ...    \"fields\": [ \"name\", \"subnet\" ]\n        ... }\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; async def get_address(request: dict[str, Any]):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         return await fmg.get(address_request)\n        &gt;&gt;&gt; asyncio.run(get_address())\n        ```\n    Returns:\n        (AsyncFMGResponse): response object with data\n    \"\"\"\nbody = {\n\"method\": \"get\",\n\"params\": [request],\n\"verbose\": 1,  # get string values instead of numeric\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\nresult = AsyncFMGResponse(fmg=self)\ntry:\napi_result = await self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresult.data = api_result\nreturn result\n# handling empty result list\nif not api_result.get(\"data\"):\nresult.data = {\"data\": []}\nreturn result\n# processing result list\nresult.data = api_result\nresult.success = True\nresult.status = api_result.get(\"status\", {}).get(\"code\", 400)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.get_version","title":"get_version  <code>async</code>","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Gather FMG version</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\nasync def get_version(self) -&gt; str:\n\"\"\"Gather FMG version\"\"\"\nrequest = {\n\"method\": \"get\",\n\"params\": [{\"url\": \"/sys/status\"}],\n\"id\": 1,\n\"session\": self._token.get_secret_value(),\n}\nreq = await self._post(request)\nreturn req[\"data\"][\"Version\"]\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.open","title":"open  <code>async</code>","text":"<pre><code>open() -&gt; AsyncFMGBase\n</code></pre> <p>open connection</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def open(self) -&gt; \"AsyncFMGBase\":\n\"\"\"open connection\"\"\"\nlogger.debug(\"Initializing connection to %s with id: %s\", self._settings.base_url, self._id)\nself._session = aiohttp.ClientSession()\nself._token = await self._get_token()\nreturn self\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.set","title":"set  <code>async</code>","text":"<pre><code>set(request: dict[str, Any]) -&gt; AsyncFMGResponse\n</code></pre> <p>Set operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Set operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def set_address(request):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         return await fmg.set(address_request)\n&gt;&gt;&gt; asyncio.run(set_address())\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\n@lock\nasync def set(self, request: dict[str, Any]) -&gt; AsyncFMGResponse:\n\"\"\"Set operation\n    Args:\n        request: Set operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def set_address(request):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         return await fmg.set(address_request)\n        &gt;&gt;&gt; asyncio.run(set_address())\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nbody = {\n\"method\": \"set\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = await self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in update request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.update","title":"update  <code>async</code>","text":"<pre><code>update(request: dict[str, Any]) -&gt; AsyncFMGResponse\n</code></pre> <p>Update operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Update operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; async def update_address(request):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         return await fmg.update(address_request)\n&gt;&gt;&gt; asyncio.run(update_address())\n</code></pre> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>@auth_required\n@lock\nasync def update(self, request: dict[str, Any]) -&gt; AsyncFMGResponse:\n\"\"\"Update operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; async def update_address(request):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         return await fmg.update(address_request)\n        &gt;&gt;&gt; asyncio.run(update_address())\n        ```\n    Returns:\n        (AsyncFMGResponse): Result of operation\n    \"\"\"\nresponse = AsyncFMGResponse(fmg=self)\nbody = {\n\"method\": \"update\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = await self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in update request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGBase.wait_for_task","title":"wait_for_task  <code>async</code>","text":"<pre><code>wait_for_task(task_res: Union[int, AsyncFMGResponse], callback: Callable[[int, str], None] = None, timeout: int = 60, loop_interval: int = 2) -&gt; Union[str, None]\n</code></pre> <p>Wait for task to finish</p> <p>Parameters:</p> Name Type Description Default <code>task_res</code> <code>Union[int, AsyncFMGResponse]</code> <p>(int, AsyncFMGResponse): Task or task ID to check</p> required <code>callback</code> <code>Callable[[int, str], None]</code> <p>(Callable[[int, str], None]): function to call in each iteration.                               It must accept 2 args which are the current percentage and latest log line</p> <code>None</code> <code>timeout</code> <code>int</code> <p>(int): timeout for waiting in seconds</p> <code>60</code> <code>loop_interval</code> <code>int</code> <p>(int): interval between task status updates in seconds</p> <code>2</code> Example <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from pyfortinet.fmg_api.dvmcmd import DeviceTask\n&gt;&gt;&gt; from pyfortinet.fmg_api.dvmdb import RealDevice\n&gt;&gt;&gt; from rich.progress import Progress\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; test_device = RealDevice(name=\"test\", ip=\"1.1.1.1\", adm_usr=\"test\", adm_pass=\"&lt;PASSWORD&gt;\")\n&gt;&gt;&gt; async def add_device(device: Device):\n...     async with AsyncFMGBase(**settings) as fmg:\n...         task = DeviceTask(adom=fmg.adom, device=device)\n...         result = await fmg.exec(task)\n...         with Progress() as progress:\n...             prog_task = progress.add_task(f\"Adding device {device.name}\", total=100)\n...             update_progress = lambda percent, log: progress.update(prog_task, percent)\n...             await result.wait_for_task(task, callback=update_progress)\n&gt;&gt;&gt; asyncio.run(add_device(test_device))\n</code></pre> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def wait_for_task(\nself,\ntask_res: Union[int, AsyncFMGResponse],\ncallback: Callable[[int, str], None] = None,\ntimeout: int = 60,\nloop_interval: int = 2,\n) -&gt; Union[str, None]:\n\"\"\"Wait for task to finish\n    Args:\n        task_res: (int, AsyncFMGResponse): Task or task ID to check\n        callback: (Callable[[int, str], None]): function to call in each iteration.\n                                          It must accept 2 args which are the current percentage and latest log line\n        timeout: (int): timeout for waiting in seconds\n        loop_interval: (int): interval between task status updates in seconds\n    Example:\n        ```pycon\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; from pyfortinet.fmg_api.dvmcmd import DeviceTask\n        &gt;&gt;&gt; from pyfortinet.fmg_api.dvmdb import RealDevice\n        &gt;&gt;&gt; from rich.progress import Progress\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; test_device = RealDevice(name=\"test\", ip=\"1.1.1.1\", adm_usr=\"test\", adm_pass=\"&lt;PASSWORD&gt;\")\n        &gt;&gt;&gt; async def add_device(device: Device):\n        ...     async with AsyncFMGBase(**settings) as fmg:\n        ...         task = DeviceTask(adom=fmg.adom, device=device)\n        ...         result = await fmg.exec(task)\n        ...         with Progress() as progress:\n        ...             prog_task = progress.add_task(f\"Adding device {device.name}\", total=100)\n        ...             update_progress = lambda percent, log: progress.update(prog_task, percent)\n        ...             await result.wait_for_task(task, callback=update_progress)\n        &gt;&gt;&gt; asyncio.run(add_device(test_device))\n        ```\n    \"\"\"\ntask_id = task_res if isinstance(task_res, int) else task_res.data.get(\"data\", {}).get(\"taskid\")\nif task_id is None:\nreturn\nstart_time = time.time()\nwhile True:\ntask: Task = (await self.get(Task, F(id=task_id))).first()\nif not task:\nreturn\nif time.time() - start_time &gt; timeout:\nraise TimeoutError(f\"Timed out waiting {timeout} seconds for the task {task.id}!\")\nif callable(callback):\nif asyncio.iscoroutinefunction(callback):\nawait callback(task.percent, task.line[-1].detail if task.line else \"\")\nelse:\ncallback(task.percent, task.line[-1].detail if task.line else \"\")\n# exit on the following states\nif task.state in [\"cancelled\", \"done\", \"error\", \"aborted\", \"to_continue\", \"unknown\"]:\nreturn task.state\nawait asyncio.sleep(loop_interval)\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext","title":"AsyncFMGLockContext","text":"<pre><code>AsyncFMGLockContext(fmg: AsyncFMGBase)\n</code></pre> <p>Lock FMG workspace</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>def __init__(self, fmg: \"AsyncFMGBase\"):\nself._fmg = fmg\nself._locked_adoms = set()\nself._uses_workspace = False\nself._uses_adoms = False\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.locked_adoms","title":"locked_adoms  <code>property</code>","text":"<pre><code>locked_adoms: set[str]\n</code></pre> <p>returns locked adom set</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.uses_workspace","title":"uses_workspace  <code>property</code>","text":"<pre><code>uses_workspace: bool\n</code></pre> <p>returns workspace usage</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.check_mode","title":"check_mode  <code>async</code>","text":"<pre><code>check_mode()\n</code></pre> <p>Get workspace-mode from config</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def check_mode(self):\n\"\"\"Get workspace-mode from config\"\"\"\nurl = \"/cli/global/system/global\"\nresult = await self._fmg.get({\"url\": url, \"fields\": [\"workspace-mode\", \"adom-status\"]})\nself._uses_workspace = result.data[\"data\"].get(\"workspace-mode\") != 0\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.commit_changes","title":"commit_changes  <code>async</code>","text":"<pre><code>commit_changes(adoms: Optional[list] = None, aux: bool = False) -&gt; list[AsyncFMGResponse]\n</code></pre> <p>Apply workspace changes in the DB</p> <p>Parameters:</p> Name Type Description Default <code>adoms</code> <code>Optional[list]</code> <p>list of ADOMs to commit. If empty, commit ALL ADOMs.</p> <code>None</code> <code>aux</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>list[FMGResponse]</code> <p>List of response of operations</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def commit_changes(self, adoms: Optional[list] = None, aux: bool = False) -&gt; list[AsyncFMGResponse]:\n\"\"\"Apply workspace changes in the DB\n    Args:\n        adoms: list of ADOMs to commit. If empty, commit ALL ADOMs.\n        aux:\n    Returns:\n        (list[FMGResponse]): List of response of operations\n    \"\"\"\nresults = []\nif not adoms:\nadoms = self._locked_adoms\nfor adom in adoms:\nif aux:\nurl = f\"/pm/config/adom/{adom}/workspace/commit\"\nelif adom.lower() == \"global\":\nurl = \"/dvmdb/global/workspace/commit/\"\nelse:\nurl = f\"/dvmdb/adom/{adom}/workspace/commit\"\nresults.append(await self._fmg.exec({\"url\": url}))\nreturn results\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.lock_adoms","title":"lock_adoms  <code>async</code>","text":"<pre><code>lock_adoms(*adoms: str) -&gt; AsyncFMGResponse\n</code></pre> <p>Lock adom list</p> <p>If no adom specified, global workspace will be locked</p> <p>Parameters:</p> Name Type Description Default <code>*adoms</code> <code>str</code> <p>list of adom names</p> <code>()</code> <p>Returns:</p> Type Description <code>AsyncFMGResponse</code> <p>Response object</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def lock_adoms(self, *adoms: str) -&gt; AsyncFMGResponse:\n\"\"\"Lock adom list\n    If no adom specified, global workspace will be locked\n    Args:\n        *adoms (str): list of adom names\n    Returns:\n        Response object\n    \"\"\"\nresult = AsyncFMGResponse(fmg=self._fmg)\nif not adoms:\nadoms = [\"root\"]\nfor adom in adoms:\nurl = \"/dvmdb/global/workspace/lock/\" if adom.lower() == \"global\" else f\"/dvmdb/adom/{adom}/workspace/lock/\"\nresult.data.update({adom: await self._fmg.exec(request={\"url\": url})})\nif result.data[adom].data.get(\"error\"):\nraise FMGLockException(result.data[adom].data)\nself._locked_adoms.add(adom)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGLockContext.unlock_adoms","title":"unlock_adoms  <code>async</code>","text":"<pre><code>unlock_adoms(*adoms) -&gt; AsyncFMGResponse\n</code></pre> <p>unlock ADOMs</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>async def unlock_adoms(self, *adoms) -&gt; AsyncFMGResponse:\n\"\"\"unlock ADOMs\"\"\"\nresult = AsyncFMGResponse(fmg=self._fmg)\nif not adoms:\nadoms = copy(self._locked_adoms)\nfor adom in adoms:\nif adom.lower() == \"global\":\nurl = \"/dvmdb/global/workspace/unlock/\"\nelse:\nurl = f\"/dvmdb/adom/{adom}/workspace/unlock/\"\nresult.data.update({adom: await self._fmg.exec(request={\"url\": url})})\nif not result.data[adom].data.get(\"error\"):\nself._locked_adoms.remove(adom)\nif self._locked_adoms:\nraise FMGException(f\"Failed to unlock ADOMs: {self._locked_adoms}\")\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGResponse","title":"AsyncFMGResponse  <code>dataclass</code>","text":"<pre><code>AsyncFMGResponse(data: Union[dict, List[FMGObject]] = dict(), status: int = 0, success: bool = False, fmg: AsyncFMGBase = None)\n</code></pre> <p>Response to a request</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict | List[FMGObject]</code> <p>response data</p> <code>status</code> <code>int</code> <p>status code</p> <code>success</code> <code>bool</code> <p>True on success</p>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.AsyncFMGResponse.first","title":"first","text":"<pre><code>first() -&gt; Optional[Union[FMGObject, dict]]\n</code></pre> <p>Return first data or None if result is empty</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>def first(self) -&gt; Optional[Union[FMGObject, dict]]:\n\"\"\"Return first data or None if result is empty\"\"\"\nif isinstance(self.data, dict):\nif isinstance(self.data.get(\"data\"), list):\nreturn self.data.get(\"data\")[0] if self.data.get(\"data\") else None\nelse:\nreturn self.data.get(\"data\")\nelif isinstance(self.data, list) and self.data:  # non-empty list\nreturn self.data[0]\nreturn None\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.auth_required","title":"auth_required","text":"<pre><code>auth_required(func: Callable) -&gt; Callable\n</code></pre> <p>Decorator to provide authentication for the method</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to handle authentication errors</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>function with authentication handling enabled</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>def auth_required(func: Callable) -&gt; Callable:\n\"\"\"Decorator to provide authentication for the method\n    Args:\n        func: function to handle authentication errors\n    Returns:\n        function with authentication handling enabled\n    \"\"\"\n@functools.wraps(func)\nasync def decorated(self, *args, **kwargs):\n\"\"\"method which needs authentication\"\"\"\nif not self._token:\nraise FMGTokenException(\"No token was obtained. Open connection first!\")\ntry:\nreturn await func(self, *args, **kwargs)\nexcept FMGException as err:\ntry:  # try again after refreshing token\nself._token = await self._get_token()  # pylint: disable=protected-access  # decorator of methods\nreturn await func(self, *args, **kwargs)\nexcept FMGException as err2:\nraise err2 from err\nreturn decorated\n</code></pre>"},{"location":"reference/fmg_api/async_fmgbase/#fmg_api.async_fmgbase.lock","title":"lock","text":"<pre><code>lock(func: Callable) -&gt; Callable\n</code></pre> <p>Decorator to provide ADOM locking if needed</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to handle errors complaining about no locking</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>function with lock handling enabled</p> Source code in <code>pyfortinet/fmg_api/async_fmgbase.py</code> <pre><code>def lock(func: Callable) -&gt; Callable:\n\"\"\"Decorator to provide ADOM locking if needed\n    Args:\n        func: function to handle errors complaining about no locking\n    Returns:\n        (Callable): function with lock handling enabled\n    \"\"\"\n@functools.wraps(func)\nasync def lock_decorated(self: \"AsyncFMGBase\" = None, *args, **kwargs):\n\"\"\"method which needs locking\"\"\"\ntry:\nreturn await func(self, *args, **kwargs)\nexcept FMGLockNeededException as err:\ntry:  # try again after locking\nif not args:  # in case we got kwargs request\nargs = [kwargs.get(\"request\")]\ndel kwargs[\"request\"]\n# args[0] is the request dict or obj\nif isinstance(args[0], dict):\nurl = args[0].get(\"url\")\nadom_match = re.search(r\"/(?P&lt;adom&gt;global|(?&lt;=adom/)\\w+)/\", url)\nif adom_match:\nadom = adom_match.group(\"adom\")\nelse:\nraise FMGException(f\"No ADOM found to lock in url '{url}'\") from err\nelse:\nadom = args[0].fmg_scope\nif adom not in self.lock.locked_adoms:\nawait self.lock(adom)\nelse:  # ADOM already locked, do not try to lock it again\nraise\nreturn await func(self, *args, **kwargs)\nexcept FMGException as err2:\nraise err2 from err\nreturn lock_decorated\n</code></pre>"},{"location":"reference/fmg_api/common/","title":"common","text":"<p>Common objects</p>"},{"location":"reference/fmg_api/common/#fmg_api.common.FILTER_TYPE","title":"FILTER_TYPE  <code>module-attribute</code>","text":"<pre><code>FILTER_TYPE = Union[F, FilterList, ComplexFilter]\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.OP","title":"OP  <code>module-attribute</code>","text":"<pre><code>OP = {'eq': '==', 'neq': '!=', 'lt': '&lt;', 'le': '&lt;=', 'gt': '&gt;', 'ge': '&gt;=', 'or': '&amp;', 'in': 'in', 'contain': 'contain', 'like': 'like', 'not_like': '!like', 'glob': 'glob', 'not_glob': '!glob'}\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.ComplexFilter","title":"ComplexFilter","text":"<pre><code>ComplexFilter(a: Union[ComplexFilter, FilterList, F], op: Literal['||', '&amp;&amp;'], b: Union[ComplexFilter, FilterList, F])\n</code></pre> <p>Complex handling of filters and their operator</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def __init__(\nself,\na: Union[\"ComplexFilter\", FilterList, F],\nop: Literal[\"||\", \"&amp;&amp;\"],\nb: Union[\"ComplexFilter\", FilterList, F],\n):\nself.a = a\nself.op = op\nself.b = b\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.ComplexFilter.generate","title":"generate","text":"<pre><code>generate() -&gt; list\n</code></pre> <p>Generate API filter output</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def generate(self) -&gt; list:\n\"\"\"Generate API filter output\"\"\"\nout = [self.a.generate(), self.op, self.b.generate()]\nreturn out\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.F","title":"F","text":"<pre><code>F(**kwargs)\n</code></pre> <p>Filter class that allows us to define a single filter for an object</p> <p>Argument format is {field}={value} or {field}__{operator}={value} Only one argument can be passed!</p> <p>Filter object can be used at <code>FMG.get</code> method</p> <p>Attributes:</p> Name Type Description <code>negate</code> <code>bool</code> <p>If true the filter is negated</p> <code>source</code> <code>str</code> <p>The source is the API attribute we are looking at</p> <code>op</code> <code>str</code> <p>The operator for the search</p> <code>targets</code> <code>str</code> <p>The target is the value we are searching for</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def __init__(self, **kwargs):\n\"\"\"Filter initialization\"\"\"\nif len(kwargs) &gt; 1:\nraise ValueError(f\"F only accepts one filter condition at a time!\")\nfor key, value in kwargs.items():\nif \"__\" in key:\nself.source, self.op = key.split(\"__\")\nif self.op not in OP:\nraise ValueError(f\"Unknown operation: '{self.op}' !\")\nself.op = OP[self.op]\nelse:\nself.source = key\nself.op = \"==\"\nself.targets = value\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.F.generate","title":"generate","text":"<pre><code>generate() -&gt; List[str]\n</code></pre> <p>Generate API filter list</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def generate(self) -&gt; List[str]:\n\"\"\"Generate API filter list\"\"\"\nout = []\nif self.negate:\nout.append(\"!\")\nout.append(self.source)\nout.append(self.op)\nif isinstance(self.targets, list):\nout.extend(self.targets)\nelse:\nout.append(self.targets)\nreturn out\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.FilterList","title":"FilterList","text":"<pre><code>FilterList(*members: Union[F, FilterList])\n</code></pre> <p>List of F objects</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def __init__(self, *members: Union[F, \"FilterList\"]):\nself.members = []\nfor member in members:\nself + member\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.FilterList.generate","title":"generate","text":"<pre><code>generate() -&gt; List[List[str]]\n</code></pre> <p>Generate API filter output</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def generate(self) -&gt; List[List[str]]:\n\"\"\"Generate API filter output\"\"\"\nreturn [member.generate() for member in self.members]\n</code></pre>"},{"location":"reference/fmg_api/common/#fmg_api.common.Scope","title":"Scope","text":"<p>Specify scope for an object</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Scope name (e.g. firewall name or group name)</p> <code>vdom</code> <code>str</code> <p>VDOM if applicable</p>"},{"location":"reference/fmg_api/common/#fmg_api.common.text_to_filter","title":"text_to_filter","text":"<pre><code>text_to_filter(text: str) -&gt; FILTER_TYPE\n</code></pre> <p>Text to filter object</p> <p>Format of the text follows the <code>OP</code> definition! This is a simple text to filter object converter. It does not support more complex logic. Simple field comparisons with <code>and/or and ,</code> operators are supported. <code>,</code> means a simple <code>or</code> between same type fields.</p> <p>structure::</p> <pre><code>fname fop fvalue OP fname fop fvalue OP ...\n----------------    ----------------\n    F token              F token\n</code></pre> <p>Examples:</p> <p>simple F filter</p> <pre><code>&gt;&gt;&gt; text_to_filter('name like host_%').generate()\n['name', 'like', 'host_%']\n</code></pre> <p>inversing</p> <pre><code>&gt;&gt;&gt; text_to_filter('~name like host_%').generate()\n['!', 'name', 'like', 'host_%']\n</code></pre> <p>simple or function</p> <pre><code>&gt;&gt;&gt; text_to_filter('name eq host_1, name eq host_2').generate()\n[['name', '==', 'host_1'], ['name', '==', 'host_2']]\n</code></pre> <p>more complex filter</p> <pre><code>&gt;&gt;&gt; text_to_filter('name eq host_1 and conf_status eq insync').generate()\n[['name', '==', 'host_1'], '&amp;&amp;', ['conf_status', '==', 'insync']]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to parse</p> required <p>Returns:</p> Name Type Description <code>FILTER_TYPE</code> <code>FILTER_TYPE</code> <p>Filter object which can be used in FMG.get calls</p> <p>Raises:      ValueError: text cannot be parsed</p> Source code in <code>pyfortinet/fmg_api/common.py</code> <pre><code>def text_to_filter(text: str) -&gt; FILTER_TYPE:\n\"\"\"Text to filter object\n    Format of the text follows the ``OP`` definition!\n    This is a simple text to filter object converter. It does not support more complex logic.\n    Simple field comparisons with `and/or and ,` operators are supported. `,` means a simple `or` between same\n    type fields.\n    structure::\n        fname fop fvalue OP fname fop fvalue OP ...\n        ----------------    ----------------\n            F token              F token\n    Examples:\n        simple F filter\n        &gt;&gt;&gt; text_to_filter('name like host_%').generate()\n        ['name', 'like', 'host_%']\n        inversing\n        &gt;&gt;&gt; text_to_filter('~name like host_%').generate()\n        ['!', 'name', 'like', 'host_%']\n        simple or function\n        &gt;&gt;&gt; text_to_filter('name eq host_1, name eq host_2').generate()\n        [['name', '==', 'host_1'], ['name', '==', 'host_2']]\n        more complex filter\n        &gt;&gt;&gt; text_to_filter('name eq host_1 and conf_status eq insync').generate()\n        [['name', '==', 'host_1'], '&amp;&amp;', ['conf_status', '==', 'insync']]\n    Args:\n        text (str): Text to parse\n    Returns:\n        FILTER_TYPE: Filter object which can be used in FMG.get calls\n     Raises:\n         ValueError: text cannot be parsed\n    \"\"\"\ntext = text.strip()\nwhile text:\n# search F tokens\nf_match = re.match(\nrf'(?P&lt;negate&gt;~)?\\s*(?P&lt;fname&gt;\\w+)\\s+(?P&lt;fop&gt;{\"|\".join(OP.keys())})\\s+(?P&lt;fvalue&gt;\\S+)(?&lt;![,|&amp;])', text\n)\nif f_match:\nkwargs = {f\"{f_match.group('fname')}__{f_match.group('fop')}\": f_match.group(\"fvalue\")}\nif f_match.group(\"negate\"):\nf_token = ~F(**kwargs)\nelse:\nf_token = F(**kwargs)\nelse:\nraise ValueError(f\"Couldn't parse '{text}'!\")\ntext = text[f_match.end() :].strip()\nif not text:\nreturn f_token\n# search list or complex filter ops\nop_match = re.match(rf\"(?P&lt;op&gt;and|or|,)\\s+\", text)\nif op_match:\nop = {\"and\": \"&amp;&amp;\", \"or\": \"||\", \",\": \",\"}.get(op_match.group(\"op\"))\nelse:\nraise ValueError(f\"Couldn't parse '{text}'!\")\ntext = text[op_match.end() :].strip()\nf_token2 = text_to_filter(text)\nif op == \",\":\nreturn FilterList(f_token, f_token2)\nelse:\n# noinspection PyTypeChecker, PydanticTypeChecker\nreturn ComplexFilter(f_token, op, f_token2)\n</code></pre>"},{"location":"reference/fmg_api/dvmcmd/","title":"dvmcmd","text":"<p>Device Manager Command</p>"},{"location":"reference/fmg_api/dvmcmd/#fmg_api.dvmcmd.FLAGS","title":"FLAGS  <code>module-attribute</code>","text":"<pre><code>FLAGS = Literal['none', 'create_task', 'nonblocking', 'log_dev']\n</code></pre>"},{"location":"reference/fmg_api/dvmcmd/#fmg_api.dvmcmd.DeviceTask","title":"DeviceTask","text":"<p>             Bases: <code>FMGExecObject</code></p> <p>Add/Del device request</p> <p>Attributes:</p> Name Type Description <code>action</code> <code>Literal['add', 'del']</code> <p>Add or Del device</p> <code>adom</code> <code>str</code> <p>ADOM to use</p> <code>device</code> <code>Union[str, DeviceAction, ModelDevice]</code> <p>Device to add/del</p> <code>flags</code> <code>List[FLAGS]</code> <p>Job flags</p> <code>groups</code> <code>List[Scope]</code> <p>device groups</p>"},{"location":"reference/fmg_api/dvmcmd/#fmg_api.dvmcmd.DeviceTask.validate_devicejob","title":"validate_devicejob","text":"<pre><code>validate_devicejob() -&gt; DeviceTask\n</code></pre> <p>Validate device job</p> Source code in <code>pyfortinet/fmg_api/dvmcmd.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_devicejob(self) -&gt; \"DeviceTask\":\n\"\"\"Validate device job\"\"\"\nself._url = self._url.replace(\"{action}\", self.action)\nif self.action == \"del\":\nself.device = self.device.name  # deleting a device requires device id or name\nreturn self\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/","title":"dvmdb","text":"<p>Device DB objects</p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.CONF_STATUS","title":"CONF_STATUS  <code>module-attribute</code>","text":"<pre><code>CONF_STATUS = Literal['unknown', 'insync', 'outofsync']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.CONN_MODE","title":"CONN_MODE  <code>module-attribute</code>","text":"<pre><code>CONN_MODE = Literal['active', 'passive']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.CONN_STATUS","title":"CONN_STATUS  <code>module-attribute</code>","text":"<pre><code>CONN_STATUS = Literal['UNKNOWN', 'up', 'down']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.DB_STATUS","title":"DB_STATUS  <code>module-attribute</code>","text":"<pre><code>DB_STATUS = Literal['unknown', 'nomod', 'mod']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.DEVICE_ACTION","title":"DEVICE_ACTION  <code>module-attribute</code>","text":"<pre><code>DEVICE_ACTION = Literal['add_model', 'promote_unreg']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.DEV_STATUS","title":"DEV_STATUS  <code>module-attribute</code>","text":"<pre><code>DEV_STATUS = Literal['none', 'unknown', 'checkedin', 'inprogress', 'installed', 'aborted', 'sched', 'retry', 'canceled', 'pending', 'retrieved', 'changed_conf', 'sync_fail', 'timeout', 'rev_revert', 'auto_updated']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.MGMT_MODE","title":"MGMT_MODE  <code>module-attribute</code>","text":"<pre><code>MGMT_MODE = Literal['unreg', 'fmg', 'faz', 'fmgfaz']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.OP_MODE","title":"OP_MODE  <code>module-attribute</code>","text":"<pre><code>OP_MODE = Literal['nat', 'transparent']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.OS_TYPE","title":"OS_TYPE  <code>module-attribute</code>","text":"<pre><code>OS_TYPE = Literal['unknown', 'fos', 'fsw', 'foc', 'fml', 'faz', 'fwb', 'fch', 'fct', 'log', 'fmg', 'fsa', 'fdd', 'fac', 'fpx', 'fna', 'ffw', 'fsr', 'fad', 'fdc', 'fap', 'fxt', 'fts', 'fai', 'fwc', 'fis', 'fed']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.OS_VER","title":"OS_VER  <code>module-attribute</code>","text":"<pre><code>OS_VER = Literal['unknown', '0.0', '1.0', '2.0', '3.0', '4.0', '5.0', '6.0', '7.0', '8.0', '9.0']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.ROLE","title":"ROLE  <code>module-attribute</code>","text":"<pre><code>ROLE = Literal['slave', 'master']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.VDOM_TYPE","title":"VDOM_TYPE  <code>module-attribute</code>","text":"<pre><code>VDOM_TYPE = Literal['traffic', 'admin']\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.BaseDevice","title":"BaseDevice","text":"<p>             Bases: <code>BaseModel</code></p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.BaseDevice.validate_ip","title":"validate_ip","text":"<pre><code>validate_ip(v)\n</code></pre> <p>validate input but still represent the string</p> Source code in <code>pyfortinet/fmg_api/dvmdb.py</code> <pre><code>@field_validator(\"ip\")\ndef validate_ip(cls, v):\n\"\"\"validate input but still represent the string\"\"\"\nif v:\nassert IPvAnyAddress(v)\nreturn v\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.BaseDevice.validate_mgmt_mode","title":"validate_mgmt_mode","text":"<pre><code>validate_mgmt_mode(v)\n</code></pre> <p>ensure using text variant</p> Source code in <code>pyfortinet/fmg_api/dvmdb.py</code> <pre><code>@field_validator(\"mgmt_mode\", mode=\"before\")\ndef validate_mgmt_mode(cls, v):\n\"\"\"ensure using text variant\"\"\"\nreturn MGMT_MODE.__dict__.get(\"__args__\")[v] if isinstance(v, int) else v\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.BaseDevice.validate_os_type","title":"validate_os_type","text":"<pre><code>validate_os_type(v)\n</code></pre> <p>ensure using text variant</p> Source code in <code>pyfortinet/fmg_api/dvmdb.py</code> <pre><code>@field_validator(\"os_type\", mode=\"before\")\ndef validate_os_type(cls, v):\n\"\"\"ensure using text variant\"\"\"\nreturn OS_TYPE.__dict__.get(\"__args__\")[v] if isinstance(v, int) else v\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.BaseDevice.validate_os_ver","title":"validate_os_ver","text":"<pre><code>validate_os_ver(v)\n</code></pre> <p>ensure using text variant</p> Source code in <code>pyfortinet/fmg_api/dvmdb.py</code> <pre><code>@field_validator(\"os_ver\", mode=\"before\")\ndef validate_os_ver(cls, v):\n\"\"\"ensure using text variant\"\"\"\nreturn OS_VER.__dict__.get(\"__args__\")[v] if isinstance(v, int) else v\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.Device","title":"Device","text":"<p>             Bases: <code>FMGObject</code>, <code>BaseDevice</code></p> <p>ADOM level Device object</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>object name</p> <code>adm_usr</code> <code>str</code> <p>admin user</p> <code>adm_pass</code> <code>list[str]</code> <p>admin password</p> <code>app_ver</code> <code>str</code> <p>App DB version</p> <code>av_ver</code> <code>str</code> <p>Anti-Virus DB version</p> <code>checksum</code> <code>str</code> <p>Configuration checksum</p> <code>conf_status</code> <code>CONF_STATUS</code> <p>Configuration status</p> <code>ha_group_id</code> <code>int</code> <p>HA group ID</p> <code>ha_group_name</code> <code>str</code> <p>HA group Name</p> <code>hostname</code> <code>str</code> <p>hostname</p> <code>mgmt_if</code> <code>str</code> <p>management interface name</p> <code>mgmt_uuid</code> <code>str</code> <code>mgt_vdom</code> <code>str</code> <p>management VDOM</p> <code>psk</code> <code>str</code> <p>pre-shared secret</p> <code>version</code> <code>int</code> <code>platform_str</code> <code>str</code> <p>platform name (device model)</p> <code>vdom</code> <code>list[VDOM]</code> <p>VDOM list</p> <code>ha_slave</code> <code>Optional[List[HASlave]]</code> <p>Optional[List[HASlave]]</p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.Device.get_vdom_scope","title":"get_vdom_scope","text":"<pre><code>get_vdom_scope(vdom: str) -&gt; Optional[Scope]\n</code></pre> <p>Get Scope for a VDOM to be used by filters</p> <p>Returns:</p> Type Description <code>Scope or None</code> <p>The scope for the given VDOM</p> Source code in <code>pyfortinet/fmg_api/dvmdb.py</code> <pre><code>def get_vdom_scope(self, vdom: str) -&gt; Optional[Scope]:\n\"\"\"Get Scope for a VDOM to be used by filters\n    Returns:\n        (Scope or None): The scope for the given VDOM\n    \"\"\"\nif vdom in (s_vdom.name for s_vdom in self.vdom):\nreturn Scope(name=self.name, vdom=vdom)\nreturn None\n</code></pre>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.HASlave","title":"HASlave","text":"<p>             Bases: <code>FMGObject</code></p> <p>HA Slave object to inspect HA members</p> <p>Attributes:</p> Name Type Description <code>conf_status</code> <code>CONF_STATUS</code> <p>member HA config sync status (with other members)</p> <code>#did</code> <code>str</code> <p>device ID (cluster name)</p> <code>#flags</code> <code>str</code> <p>undocumented</p> <code>idx</code> <code>int</code> <p>device number in cluster (0,1)</p> <code>name</code> <code>str</code> <p>member device name</p> <code>#oid</code> <code>int</code> <p>undocumented</p> <code>prio</code> <code>int</code> <p>HA priority</p> <code>role</code> <code>ROLE</code> <p>member role</p> <code>sn</code> <code>str</code> <p>serial number</p> <code>status</code> <code>CONN_STATUS</code> <p>status of HA member</p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.ModelDevice","title":"ModelDevice","text":"<p>             Bases: <code>FMGObject</code>, <code>BaseDevice</code></p> <p>Model device fields</p> <p>Attributes:</p> Name Type Description <code>name</code> <p>Device name</p> <code>adm_usr</code> <code>str</code> <p>Administrator username</p> <code>adm_pass</code> <code>str</code> <p>Administrator password</p> <code>desc</code> <code>str</code> <p>Device description</p> <code>ip</code> <code>str</code> <p>Device IP address</p> <code>meta_fields</code> <code>dict</code> <p>Meta fields data</p> <code>mgmt_mode</code> <code>MGMT_MODE</code> <p>Management mode of the device</p> <code>os_type</code> <code>OS_TYPE</code> <p>OS type of the device</p> <code>os_ver</code> <code>OS_VER</code> <p>OS major version</p> <code>mr</code> <code>int</code> <p>OS minor version</p> <code>patch</code> <code>int</code> <p>OS patch version</p> <code>sn</code> <code>str</code> <p>Serial number of the device</p> <code>device_action</code> <code>DEVICE_ACTION</code> <p>Device add or remove action</p> <code>device_blueprint</code> <code>str</code> <p>Device blueprint name</p> <code>platform_str</code> <code>str</code> <p>Platform string for virtual device</p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.RealDevice","title":"RealDevice","text":"<p>             Bases: <code>FMGObject</code>, <code>BaseDevice</code></p> <p>Device class to add or remove firewall</p> <p>Attributes:</p> Name Type Description <code>name</code> <p>Device name</p> <code>adm_usr</code> <code>str</code> <p>Administrator username</p> <code>adm_pass</code> <code>str</code> <p>Administrator password</p> <code>desc</code> <code>str</code> <p>Device description</p> <code>ip</code> <code>str</code> <p>Device IP address</p> <code>meta_fields</code> <code>dict</code> <p>Meta fields data</p> <code>mgmt_mode</code> <code>MGMT_MODE</code> <p>Management mode of the device</p> <code>os_type</code> <code>OS_TYPE</code> <p>OS type of the device</p> <code>os_ver</code> <code>OS_VER</code> <p>OS major version</p> <code>mr</code> <code>int</code> <p>OS minor version</p> <code>patch</code> <code>int</code> <p>OS patch version</p> <code>sn</code> <code>str</code> <p>Serial number of the device</p> <code>device_action</code> <code>DEVICE_ACTION</code> <p>Device add or remove action</p> <code>device_blueprint</code> <code>str</code> <p>Device blueprint name</p>"},{"location":"reference/fmg_api/dvmdb/#fmg_api.dvmdb.VDOM","title":"VDOM","text":"<p>             Bases: <code>FMGObject</code></p> <p>Device Virtual Domain</p>"},{"location":"reference/fmg_api/firewall/","title":"firewall","text":"<p>Firewall object types</p>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.ADDRESS_GROUP_CATEGORY","title":"ADDRESS_GROUP_CATEGORY  <code>module-attribute</code>","text":"<pre><code>ADDRESS_GROUP_CATEGORY = Literal['default', 'ztna-ems-tag', 'ztna-geo-tag']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.ADDRESS_GROUP_TYPE","title":"ADDRESS_GROUP_TYPE  <code>module-attribute</code>","text":"<pre><code>ADDRESS_GROUP_TYPE = Literal['default', 'array', 'folder']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.ADDRESS_TYPE","title":"ADDRESS_TYPE  <code>module-attribute</code>","text":"<pre><code>ADDRESS_TYPE = Literal['ipmask', 'iprange', 'fqdn', 'wildcard', 'geography', 'url', 'wildcard-fqdn', 'nsx', 'aws', 'dynamic', 'interface-subnet', 'mac', 'fqdn-group']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.ALLOW_ROUTING","title":"ALLOW_ROUTING  <code>module-attribute</code>","text":"<pre><code>ALLOW_ROUTING = Literal['disable', 'enable']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.CLEARPASS_SPT","title":"CLEARPASS_SPT  <code>module-attribute</code>","text":"<pre><code>CLEARPASS_SPT = Literal['unknown', 'healthy', 'quarantine', 'checkup', 'transition', 'infected', 'transient']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.DIRTY","title":"DIRTY  <code>module-attribute</code>","text":"<pre><code>DIRTY = Literal['dirty', 'clean']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.FABRIC_OBJECT","title":"FABRIC_OBJECT  <code>module-attribute</code>","text":"<pre><code>FABRIC_OBJECT = Literal['disable', 'enable']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.NODE_IP_ONLY","title":"NODE_IP_ONLY  <code>module-attribute</code>","text":"<pre><code>NODE_IP_ONLY = Literal['disable', 'enable']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.OBJ_TYPE","title":"OBJ_TYPE  <code>module-attribute</code>","text":"<pre><code>OBJ_TYPE = Literal['ip', 'mac']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.SDN_ADDR_TYPE","title":"SDN_ADDR_TYPE  <code>module-attribute</code>","text":"<pre><code>SDN_ADDR_TYPE = Literal['private', 'public', 'all']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.SUB_TYPE","title":"SUB_TYPE  <code>module-attribute</code>","text":"<pre><code>SUB_TYPE = Literal['sdn', 'clearpass-spt', 'fsso', 'ems-tag', 'swc-tag', 'fortivoice-tag', 'fortinac-tag', 'fortipolicy-tag']\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.Address","title":"Address","text":"<p>             Bases: <code>FMGObject</code></p> <p>Address class for high-level operations</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>object name</p> <code>allow_routing</code> <code>str</code> <p>Defines whether the use of this address in the static route configuration                  is enabled or disabled, with possible values being 'disable' or 'enable'.</p> <code>associated_interface</code> <code>str | list[str]</code> <p>object assigned to interface/zone name</p> <code>subnet</code> <code>str | list[str]</code> <p>subnet in x.x.x.x/x or [x.x.x.x, y.y.y.y] format</p> <code>cache_ttl</code> <code>int</code> <p>Defines the minimal TTL (Time To Live) of individual IP addresses in FQDN              cache measured in seconds.</p> <code>clearpass_spt</code> <code>str</code> <p>Represents the SPT (System Posture Token) value, indicating system status.                  Possible values include 'healthy', 'quarantine', 'transition', etc.</p> <code>color</code> <code>int</code> <p>color code for the address object icon on the GUI.</p> <code>comment</code> <code>str</code> <p>comment for the address object.</p> <code>country</code> <code>str</code> <p>IP addresses associated to a specific country.</p> <code>dirty</code> <code>str</code> <p>Indicates whether the address is to be deleted; possible values 'dirty' or 'clean'.</p> <code>end_ip</code> <code>str</code> <p>The final IP address (inclusive) in the range for the address.</p> <code>epg_name</code> <code>str</code> <p>endpoint group name.</p> <code>fabric_object</code> <code>str</code> <p>Indicates the Security Fabric global object setting,                  with possible values being 'disable' or 'enable'.</p> <code>filter</code> <code>str</code> <p>Match criteria filter.</p> <code>fqdn</code> <code>str</code> <p>Fully Qualified Domain Name address.</p> <code>fsso_group</code> <code>List[str]</code> <p>A list of FSSO group(s).</p> <code>interface</code> <code>str</code> <p>Name of interface whose IP address is to be used.</p> <code>list</code> <code>List[AddressList]</code> <p>List (TODO: figure out, docs don't help)</p> <code>macaddr</code> <code>List[str]</code> <p>Multiple MAC address ranges.</p> <code>node_ip_only</code> <code>str</code> <p>Defines whether only the collection of node addresses in Kubernetes                 is enabled or disabled. Possible values are 'disable' or 'enable'.</p> <code>obj_id</code> <code>str</code> <p>Object ID for NSX.</p> <code>obj_tag</code> <code>str</code> <p>Tag of dynamic address object.</p> <code>obj_type</code> <code>str</code> <p>type of the object (IP, MAC)</p> <code>organization</code> <code>str</code> <p>Organization domain name (Syntax: organization/domain).</p> <code>policy_group</code> <code>str</code> <p>policy group name.</p> <code>sdn</code> <code>str</code> <p>SDN.</p> <code>sdn_addr_type</code> <code>str</code> <p>Type of addresses to collect.</p> <code>sdn_tag</code> <code>str</code> <p>SDN tag.</p> <code>start_ip</code> <code>str</code> <p>First IP address (inclusive) in the range for the address.</p> <code>sub_type</code> <code>str</code> <p>Indicates the sub-type of address.             Possible values include 'sdn', 'clearpass-spt', 'fsso', etc.</p> <code>subnet_name</code> <code>str</code> <p>Subnet name.</p> <code>tag_detection_level</code> <code>str</code> <p>Tag detection level of dynamic address object.</p> <code>tag_type</code> <code>str</code> <p>Tag type of dynamic address object.</p> <code>tagging</code> <code>List[AddressTagging]</code> <p>tagging details for this address.</p> <code>tenant</code> <code>str</code> <p>tenant related to this address.</p> <code>type</code> <code>str</code> <p>Indicates the type of address. Possible values include 'ipmask', 'iprange', 'fqdn', etc.</p> <code>uuid</code> <code>str</code> <p>Contains the Universally Unique Identifier (UUID; automatically assigned but can be manually reset).</p> <code>wildcard</code> <code>str</code> <p>This is the IP address and wildcard netmask.</p> <code>wildcard_fqdn</code> <code>str</code> <p>Contains a Fully Qualified Domain Name with wildcard characters.</p> <code>global_object</code> <code>int</code> <p>global object related to this address.</p> <code>mapping__scope</code> <code>List[dict, Scope]</code> <p>the mapping scope for this address.</p>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.Address.standardize_assoc_iface","title":"standardize_assoc_iface","text":"<pre><code>standardize_assoc_iface(v)\n</code></pre> <p>validator: FMG sends a list with a single element, replace with single element</p> Source code in <code>pyfortinet/fmg_api/firewall.py</code> <pre><code>@field_validator(\"associated_interface\")\ndef standardize_assoc_iface(cls, v):\n\"\"\"validator: FMG sends a list with a single element, replace with single element\"\"\"\nif isinstance(v, list):\nreturn first(v, None)\nelse:\nreturn v\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.Address.standardize_subnet","title":"standardize_subnet","text":"<pre><code>standardize_subnet(v)\n</code></pre> <p>validator: x.x.x.x/y.y.y.y -&gt; x.x.x.x/y</p> <p>API use this list form: [\"1.2.3.4\", \"255.255.255.0\"] Human use this form: \"1.2.3.4/24\"</p> Source code in <code>pyfortinet/fmg_api/firewall.py</code> <pre><code>@field_validator(\"subnet\")\ndef standardize_subnet(cls, v):\n\"\"\"validator: x.x.x.x/y.y.y.y -&gt; x.x.x.x/y\n    API use this list form: [\"1.2.3.4\", \"255.255.255.0\"]\n    Human use this form: \"1.2.3.4/24\"\n    \"\"\"\nif isinstance(v, list):\nreturn IPv4Interface(\"/\".join(v)).compressed\nelse:\nreturn IPv4Interface(v).compressed\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.Address.validate_wildcard","title":"validate_wildcard","text":"<pre><code>validate_wildcard(v) -&gt; str\n</code></pre> <p>Ensure wildcard address definition is correct (x.x.x.x y.y.y.y)</p> Source code in <code>pyfortinet/fmg_api/firewall.py</code> <pre><code>@field_validator(\"wildcard\", mode=\"before\")\ndef validate_wildcard(cls, v) -&gt; str:\n\"\"\"Ensure wildcard address definition is correct (x.x.x.x y.y.y.y)\"\"\"\nif isinstance(v, list):\nreturn \" \".join(IPv4Address(part).compressed for part in v)\nelse:  # string\nreturn \" \".join(IPv4Address(part).compressed for part in v.split())\n</code></pre>"},{"location":"reference/fmg_api/firewall/#fmg_api.firewall.AddressGroup","title":"AddressGroup","text":"<p>             Bases: <code>FMGObject</code></p>"},{"location":"reference/fmg_api/fmg/","title":"fmg","text":"<p>FMG API for humans</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG","title":"FMG","text":"<pre><code>FMG(settings: Optional[FMGSettings] = None, **kwargs)\n</code></pre> <p>             Bases: <code>FMGBase</code></p> <p>FMG API for humans</p> <p>Goal of this class to provide easy access to FMG features. This extends the base class capabilities with easy to use methods.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>FortiManager settings</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>base_url</code> <code>str</code> <p>Base URL to access FMG (e.g.: https://myfmg/jsonrpc)</p> <code>username</code> <code>str</code> <p>User to authenticate</p> <code>password</code> <code>str</code> <p>Password for authentication</p> <code>adom</code> <code>str</code> <p>ADOM to use for this connection</p> <code>verify</code> <code>bool</code> <p>Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)</p> <code>timeout</code> <code>float</code> <p>Connection timeout for requests in seconds</p> <code>raise_on_error</code> <code>bool</code> <p>Raise exception on error</p> <code>discard_on_close</code> <code>bool</code> <p>Discard changes after connection close (workspace mode)</p> <code>discard_on_error</code> <code>bool</code> <p>Discard changes when exception occurs (workspace mode)</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def __init__(self, settings: Optional[FMGSettings] = None, **kwargs):\n\"\"\"Initializes FMG\n    Args:\n        settings (Settings): FortiManager settings\n    Keyword Args:\n        base_url (str): Base URL to access FMG (e.g.: https://myfmg/jsonrpc)\n        username (str): User to authenticate\n        password (str): Password for authentication\n        adom (str): ADOM to use for this connection\n        verify (bool): Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)\n        timeout (float): Connection timeout for requests in seconds\n        raise_on_error (bool): Raise exception on error\n        discard_on_close (bool): Discard changes after connection close (workspace mode)\n        discard_on_error (bool): Discard changes when exception occurs (workspace mode)\n    \"\"\"\nsuper().__init__(settings, **kwargs)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.add","title":"add","text":"<pre><code>add(request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse\n</code></pre> <p>Add operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Add operation's data structure or object</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.add--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...     fmg.add(address_request)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.add--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...     fmg.add(address)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def add(self, request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse:\n\"\"\"Add operation\n    Args:\n        request: Add operation's data structure or object\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...     fmg.add(address_request)\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...     fmg.add(address)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nif isinstance(request, dict):  # dict input, low-level operation\nreturn super().add(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn super().add(request={\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.delete","title":"delete","text":"<pre><code>delete(request: Union[dict[str, str], FMGObject]) -&gt; FMGResponse\n</code></pre> <p>Delete operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, str], FMGObject]</code> <p>dict or object to delete</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.delete--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n... }\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...     fmg.delete(address_request)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.delete--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\")\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...     fmg.delete(address)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def delete(self, request: Union[dict[str, str], FMGObject]) -&gt; FMGResponse:\n\"\"\"Delete operation\n    Args:\n        request: dict or object to delete\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n        ... }\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...     fmg.delete(address_request)\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\")\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...     fmg.delete(address)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn super().delete(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\nreturn super().delete(\n{\"url\": f\"{request.get_url}/{request.name}\"}\n)  # assume URL with name for del operation\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.exec","title":"exec","text":"<pre><code>exec(request: Union[dict[str, Any], FMGExecObject]) -&gt; FMGResponse\n</code></pre> <p>Execute on FMG</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def exec(self, request: Union[dict[str, Any], FMGExecObject]) -&gt; FMGResponse:\n\"\"\"Execute on FMG\"\"\"\nif isinstance(request, dict):  # low-level operation\nreturn super().exec(request)\nelif isinstance(request, FMGExecObject):\nlogger.info(\"requesting exec with high-level op to %s\", request.get_url)\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\nreturn super().exec({\"url\": request.get_url, \"data\": request.data})\nelse:\nresult = FMGResponse(fmg=self, data={\"error\": f\"Wrong type of request received: {request}\"}, status=400)\nlogger.error(result.data[\"error\"])\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.get","title":"get","text":"<pre><code>get(request: Union[dict[str, Any], Type[FMGObject]], filters: FILTER_TYPE = None, scope: Optional[str] = None, fields: Optional[List[str]] = None, loadsub: bool = True, options: Optional[List[GetOption]] = None) -&gt; FMGResponse\n</code></pre> <p>Get info from FMG</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], Type[FMGObject]]</code> <p>Get operation's data structure</p> required <code>scope</code> <code>Optional[str]</code> <p>Scope where the object is searched (defaults to FMG setting on connection)</p> <code>None</code> <code>filters</code> <code>FILTER_TYPE</code> <p>Filter expression</p> <code>None</code> <code>fields</code> <code>Optional[List[str]]</code> <p>Fields to return (default: None means all fields)</p> <code>None</code> <code>loadsub</code> <code>bool</code> <p>Load sub objects</p> <code>True</code> <code>options</code> <code>Optional[List[GetOption]]</code> <p>API request options</p> <code>None</code> <p>Examples:</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.get--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; address_request = {\n...    \"url\": \"/pm/config/global/obj/firewall/address\",\n...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n...    \"fields\": [ \"name\", \"subnet\" ]\n...}\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...    fmg.get(address_request)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.get--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; from pyfortinet.fmg_api.common import F\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; with FMG(**settings) as fmg:\n...    addresses = fmg.get(Address, F(name__like=\"test-%\") &amp; F(subnet=\"test-subnet\"))\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>response object with data</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>@auth_required\ndef get(\nself,\nrequest: Union[dict[str, Any], Type[FMGObject]],\nfilters: FILTER_TYPE = None,\nscope: Optional[str] = None,\nfields: Optional[List[str]] = None,\nloadsub: bool = True,\noptions: Optional[List[GetOption]] = None,\n) -&gt; FMGResponse:\n\"\"\"Get info from FMG\n    Args:\n        request: Get operation's data structure\n        scope: Scope where the object is searched (defaults to FMG setting on connection)\n        filters: Filter expression\n        fields: Fields to return (default: None means all fields)\n        loadsub: Load sub objects\n        options: API request options\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; address_request = {\n        ...    \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n        ...    \"fields\": [ \"name\", \"subnet\" ]\n        ...}\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...    fmg.get(address_request)\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; from pyfortinet.fmg_api.common import F\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; with FMG(**settings) as fmg:\n        ...    addresses = fmg.get(Address, F(name__like=\"test-%\") &amp; F(subnet=\"test-subnet\"))\n        ```\n    Returns:\n        (FMGResponse): response object with data\n    \"\"\"\n# Call base function for base arguments\nif isinstance(request, dict):\nreturn super().get(request)\n# High level arguments\nresult = FMGResponse(fmg=self)\nif issubclass(request, FMGObject):\n# derive url from current scope and adom\nif not scope:  # get adom from FMG settings\nscope = \"global\" if self._settings.adom == \"global\" else f\"adom/{self._settings.adom}\"\nelse:  # user specified\nscope = \"global\" if scope == \"global\" else f\"adom/{scope}\"\nurl = request._url.default.replace(\"{scope}\", scope)\nif self._settings.adom != \"global\":\nurl = url.replace(\"{adom}\", f\"/adom/{self._settings.adom}\")\nelse:\nurl = url.replace(\"{adom}\", \"\")\napi_request = {\n\"loadsub\": 1 if loadsub else 0,\n}\nif filters:\napi_request[\"filter\"] = self._get_filter_list(filters)\nif options:\napi_request[\"option\"] = options\nbody = {\n\"method\": \"get\",\n\"params\": [{\"url\": url, **api_request}],\n\"verbose\": 1,\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\nelse:\nresult.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresult.status = 400\nlogger.error(result.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(result)\nreturn result\ntry:\napi_result = self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresult.data = api_result\nreturn result\n# No need for the following. Pydantic \"alias\" can be used to handle space or dash in keys!\n# converting API names to object names (replace '-' and ' ' -&gt; _)\n# obj_model = [\n#     {key.replace(\"-\", \"_\").replace(\" \", \"_\"): value for key, value in data.items()}\n#     for data in api_result.get(\"data\")\n# ]\n# construct object list\nobjects = []\nfor value in api_result.get(\"data\"):\nobjects.append(request(**value, scope=scope, fmg=self))\nresult.data = objects\nresult.success = True\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.get_adom_list","title":"get_adom_list","text":"<pre><code>get_adom_list(filters: FILTER_TYPE = None) -&gt; Optional[List[str]]\n</code></pre> <p>Gather adoms from FMG</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>FILTER_TYPE</code> <p>filter as list or F object</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>list of adom strings or None in case of error</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def get_adom_list(self, filters: FILTER_TYPE = None) -&gt; Optional[List[str]]:\n\"\"\"Gather adoms from FMG\n    Args:\n        filters: filter as list or F object\n    Returns:\n        list of adom strings or None in case of error\n    \"\"\"\nrequest = {\"url\": \"/dvmdb/adom\", \"fields\": [\"name\"]}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\nresponse: FMGResponse = self.get(request)\nif response.success:\nreturn [adom.get(\"name\") for adom in response.data.get(\"data\")]\nreturn None\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.get_obj","title":"get_obj","text":"<pre><code>get_obj(obj: Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject], **kwargs: Dict[str, Any]) -&gt; AnyFMGObject\n</code></pre> <p>Get an object and tie it to this FMG</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject]</code> <p>Any type or instance of FMGObject or FMGExecObject</p> required <p>Other Parameters:</p> Name Type Description <code>kwargs</code> <code>Dict[str, Any]</code> <p>fields for the new object initialization</p> <p>Returns:</p> Type Description <code>AnyFMGObject</code> <p>New object, tied to this FMG</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def get_obj(\nself, obj: Union[Type[FMGObject], Type[FMGExecObject], AnyFMGObject], **kwargs: Dict[str, Any]\n) -&gt; AnyFMGObject:\n\"\"\"Get an object and tie it to this FMG\n    Arguments:\n        obj: Any type or instance of FMGObject or FMGExecObject\n    Keyword Args:\n        kwargs: fields for the new object initialization\n    Returns:\n        (AnyFMGObject): New object, tied to this FMG\n    \"\"\"\nif isinstance(obj, Union[FMGObject, FMGExecObject]):\nobj._fmg = self\nreturn obj\nelif isclass(obj) and issubclass(obj, Union[FMGObject, FMGExecObject]):\nreturn obj(fmg=self, **kwargs)\nraise TypeError(f\"Argument {obj} is not an FMGObject or FMGExecObject type\")\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.set","title":"set","text":"<pre><code>set(request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse\n</code></pre> <p>Set operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Update operation's data structure</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.set--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.set(address_request)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.set--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.set(address)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def set(self, request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse:\n\"\"\"Set operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.set(address_request)\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.set(address)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn super().set(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn super().set({\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.update","title":"update","text":"<pre><code>update(request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse\n</code></pre> <p>Update operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[dict[str, Any], FMGObject]</code> <p>Update operation's data structure</p> required <p>Examples:</p>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.update--low-level_-_dict","title":"Low-level - dict","text":"<pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.update(address_request)\n</code></pre>"},{"location":"reference/fmg_api/fmg/#fmg_api.fmg.FMG.update--high-level_-_obj","title":"High-level - obj","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.update(address)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmg.py</code> <pre><code>def update(self, request: Union[dict[str, Any], FMGObject]) -&gt; FMGResponse:\n\"\"\"Update operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ## Low-level - dict\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.update(address_request)\n        ```\n        ## High-level - obj\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.firewall import Address\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address = Address(name=\"test-address\", associated_interface=\"inside\", obj_type=\"ip\",\n        ...                   type=\"ipmask\", start_ip=\"10.0.0.1/24\")\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.update(address)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nif isinstance(request, dict):  # JSON input, low-level operation\nreturn super().update(request)\nelif isinstance(request, FMGObject):  # high-level operation\nrequest.fmg_scope = request.fmg_scope or self._settings.adom\napi_data = request.model_dump(by_alias=True, exclude_none=True)\nreturn super().update({\"url\": request.get_url, \"data\": api_data})\nelse:\nresponse.data = {\"error\": f\"Wrong type of request received: {request}\"}\nresponse.status = 400\nlogger.error(response.data[\"error\"])\nif self._raise_on_error:\nraise FMGWrongRequestException(request)\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/","title":"fmgbase","text":"<p>FMGBase connection</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase","title":"FMGBase","text":"<pre><code>FMGBase(settings: Optional[FMGSettings] = None, **kwargs)\n</code></pre> <p>Fortimanager connection class</p> <p>This can be used as a connection handler for the FortiManager. It maintains state of operation and provides functions to communicate with the FMG.</p> <p>Attributes:</p> Name Type Description <code>lock</code> <code>FMGLockContext</code> <p>Workspace lock handler</p> <p>Examples:</p> <p>Possible arguments to initialize: FMGSettings</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase--using_as_context_manager","title":"Using as context manager","text":"<pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; with FMGBase(**settings) as conn:\n...     print(conn.get_version())\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase--using_as_function","title":"Using as function:","text":"<pre><code>&gt;&gt;&gt; from pyfortinet.exceptions import FMGException\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; conn = FMGBase(**settings)\n&gt;&gt;&gt; try:\n...     conn.open()\n...     print(conn.get_version())\n... except FMGException as err:\n...     print(f\"Error: {err}\")\n... finally:\n...     conn.close()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>FortiManager settings</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>base_url</code> <code>str</code> <p>Base URL to access FMG (e.g.: https://myfmg/jsonrpc)</p> <code>username</code> <code>str</code> <p>User to authenticate</p> <code>password</code> <code>str</code> <p>Password for authentication</p> <code>adom</code> <code>str</code> <p>ADOM to use for this connection</p> <code>verify</code> <code>bool</code> <p>Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)</p> <code>timeout</code> <code>float</code> <p>Connection timeout for requests in seconds</p> <code>raise_on_error</code> <code>bool</code> <p>Raise exception on error</p> <code>discard_on_close</code> <code>bool</code> <p>Discard changes after connection close (workspace mode)</p> <code>discard_on_error</code> <code>bool</code> <p>Discard changes when exception occurs (workspace mode)</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def __init__(self, settings: Optional[FMGSettings] = None, **kwargs):\n\"\"\"Initializes FMGBase\n    Args:\n        settings (Settings): FortiManager settings\n    Keyword Args:\n        base_url (str): Base URL to access FMG (e.g.: https://myfmg/jsonrpc)\n        username (str): User to authenticate\n        password (str): Password for authentication\n        adom (str): ADOM to use for this connection\n        verify (bool): Verify SSL certificate (REQUESTS_CA_BUNDLE can set accepted CA cert)\n        timeout (float): Connection timeout for requests in seconds\n        raise_on_error (bool): Raise exception on error\n        discard_on_close (bool): Discard changes after connection close (workspace mode)\n        discard_on_error (bool): Discard changes when exception occurs (workspace mode)\n    \"\"\"\nif not settings:\nsettings = FMGSettings(**kwargs)\nself._settings = settings\nself._token: Optional[SecretStr] = None\nself._session: Optional[requests.Session] = None\nself.lock = FMGLockContext(self)\nself._raise_on_error: bool = settings.raise_on_error\nself._id: int = randint(1, 256)  # pick a random id for this session (check logs for a particular session)\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.adom","title":"adom  <code>property</code> <code>writable</code>","text":"<pre><code>adom: str\n</code></pre> <p>Returns current selected adom</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.discard_on_close","title":"discard_on_close  <code>property</code> <code>writable</code>","text":"<pre><code>discard_on_close: bool\n</code></pre> <p>Returns discard_on_close value</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.raise_on_error","title":"raise_on_error  <code>property</code> <code>writable</code>","text":"<pre><code>raise_on_error\n</code></pre> <p>Returns raise_on_error value</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.add","title":"add","text":"<pre><code>add(request: dict[str, Any]) -&gt; FMGResponse\n</code></pre> <p>Add operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Add operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.add(address_request)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\n@lock\ndef add(self, request: dict[str, Any]) -&gt; FMGResponse:\n\"\"\"Add operation\n    Args:\n        request: Add operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.add(address_request)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nbody = {\n\"method\": \"add\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in add request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.close","title":"close","text":"<pre><code>close(discard_changes: bool = False)\n</code></pre> <p>close connection</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def close(self, discard_changes: bool = False):\n\"\"\"close connection\"\"\"\n# Logout and expire token\nrequest = {\n\"id\": self._id,\n\"method\": \"exec\",\n\"params\": [{\"url\": \"/sys/logout\"}],\n\"session\": self._token.get_secret_value(),\n}\nself._settings.discard_on_close = self._settings.discard_on_close or discard_changes\ntry:\ntry:\nif self.lock.uses_workspace:\nif not self.discard_on_close:\nself.lock.commit_changes()\nself.lock.unlock_adoms()\nexcept FMGException:  # go ahead and ensure logout regardless we could unlock\npass\nreq = self._session.post(\nself._settings.base_url, json=request, verify=self._settings.verify, timeout=self._settings.timeout\n)\nstatus = req.json().get(\"result\", [{}])[0].get(\"status\", {})\nif status.get(\"code\") != 0:\nlogger.warning(\"Logout failed!\")\nexcept requests.exceptions.ConnectionError:\nlogger.warning(\"Logout failed!\")\nself._session.close()\nself._token = None\nlogger.debug(\"Closed session\")\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.delete","title":"delete","text":"<pre><code>delete(request: dict[str, str]) -&gt; FMGResponse\n</code></pre> <p>Delete operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, str]</code> <p>Update operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     fmg.delete(address_request)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\n@lock\ndef delete(self, request: dict[str, str]) -&gt; FMGResponse:\n\"\"\"Delete operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address/test-address\",\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     fmg.delete(address_request)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nbody = {\n\"method\": \"delete\",\n\"params\": [\n{\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.exec","title":"exec","text":"<pre><code>exec(request: dict[str, str]) -&gt; FMGResponse\n</code></pre> <p>Execute on FMG</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\ndef exec(self, request: dict[str, str]) -&gt; FMGResponse:\n\"\"\"Execute on FMG\"\"\"\nlogger.info(\"requesting exec with low-level op to %s\", request.get(\"url\"))\nbody = {\n\"method\": \"exec\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in exec request: %s\", api_result[\"error\"])\nresult = FMGResponse(fmg=self, data=api_result, success=api_result.get(\"status\", {}).get(\"code\") == 0)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.get","title":"get","text":"<pre><code>get(request: dict[str, Any]) -&gt; FMGResponse\n</code></pre> <p>Get info from FMG</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Get operation's param structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; address_request = {\n...    \"url\": \"/pm/config/global/obj/firewall/address\",\n...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n...    \"fields\": [ \"name\", \"subnet\" ]\n... }\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...    fmg.get(address_request)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>response object with data</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\ndef get(self, request: dict[str, Any]) -&gt; FMGResponse:  # noqa: PLR0912 - Too many branches\n\"\"\"Get info from FMG\n    Args:\n        request: Get operation's param structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; address_request = {\n        ...    \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...    \"filter\": [ [\"name\", \"==\", \"test-address\"] ],\n        ...    \"fields\": [ \"name\", \"subnet\" ]\n        ... }\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...    fmg.get(address_request)\n        ```\n    Returns:\n        (FMGResponse): response object with data\n    \"\"\"\nbody = {\n\"method\": \"get\",\n\"params\": [request],\n\"verbose\": 1,  # get string values instead of numeric\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\nresult = FMGResponse(fmg=self)\ntry:\napi_result = self._post(request=body)\nexcept FMGException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in get request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresult.data = api_result\nreturn result\n# handling empty result list\nif not api_result.get(\"data\"):\nresult.data = {\"data\": []}\nreturn result\n# processing result list\nresult.data = api_result\nresult.success = True\nresult.status = api_result.get(\"status\", {}).get(\"code\", 400)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.get_version","title":"get_version","text":"<pre><code>get_version() -&gt; str\n</code></pre> <p>Gather FMG version</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\ndef get_version(self) -&gt; str:\n\"\"\"Gather FMG version\"\"\"\nrequest = {\n\"method\": \"get\",\n\"params\": [{\"url\": \"/sys/status\"}],\n\"id\": self._id,\n\"session\": self._token.get_secret_value(),\n}\nreq = self._post(request)\nreturn req[\"data\"][\"Version\"]\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.open","title":"open","text":"<pre><code>open() -&gt; FMGBase\n</code></pre> <p>open connection</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def open(self) -&gt; \"FMGBase\":\n\"\"\"open connection\"\"\"\n# TODO: token and cloud auth\n# https://how-to-fortimanager-api.readthedocs.io/en/latest/001_fmg_json_api_introduction.html#token-based-authentication\nlogger.debug(\"Initializing connection to %s with id: %s\", self._settings.base_url, self._id)\nself._session = requests.Session()\nself._token = self._get_token()\nreturn self\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.set","title":"set","text":"<pre><code>set(request: dict[str, Any]) -&gt; FMGResponse\n</code></pre> <p>Set operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Set operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n&gt;&gt;&gt;     fmg.set(address_request)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\n@lock\ndef set(self, request: dict[str, Any]) -&gt; FMGResponse:\n\"\"\"Set operation\n    Args:\n        request: Set operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        &gt;&gt;&gt;     fmg.set(address_request)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nbody = {\n\"method\": \"set\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in update request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.update","title":"update","text":"<pre><code>update(request: dict[str, Any]) -&gt; FMGResponse\n</code></pre> <p>Update operation</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>dict[str, Any]</code> <p>Update operation's data structure</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; address_request = {\n...     \"url\": \"/pm/config/global/obj/firewall/address\",\n...     \"data\": {\n...         \"name\": \"test-address\",\n...         \"associated-interface\": \"inside\",\n...         \"obj-type\": \"ip\",\n...         \"type\": \"ipmask\",\n...         \"start-ip\": \"10.0.0.1/24\"\n...     }\n... }\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n&gt;&gt;&gt;     fmg.update(address_request)\n</code></pre> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Result of operation</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>@auth_required\n@lock\ndef update(self, request: dict[str, Any]) -&gt; FMGResponse:\n\"\"\"Update operation\n    Args:\n        request: Update operation's data structure\n    Examples:\n        ```pycon\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; address_request = {\n        ...     \"url\": \"/pm/config/global/obj/firewall/address\",\n        ...     \"data\": {\n        ...         \"name\": \"test-address\",\n        ...         \"associated-interface\": \"inside\",\n        ...         \"obj-type\": \"ip\",\n        ...         \"type\": \"ipmask\",\n        ...         \"start-ip\": \"10.0.0.1/24\"\n        ...     }\n        ... }\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        &gt;&gt;&gt;     fmg.update(address_request)\n        ```\n    Returns:\n        (FMGResponse): Result of operation\n    \"\"\"\nresponse = FMGResponse(fmg=self)\nbody = {\n\"method\": \"update\",\n\"params\": [\n{\n\"data\": request.get(\"data\"),\n\"url\": request.get(\"url\"),\n}\n],\n\"session\": self._token.get_secret_value(),\n\"id\": self._id,\n}\ntry:\napi_result = self._post(request=body)\nresponse.success = True\nresponse.status = api_result.get(\"status\")\nexcept FMGUnhandledException as err:\napi_result = {\"error\": str(err)}\nlogger.error(\"Error in update request: %s\", api_result[\"error\"])\nif self._raise_on_error:\nraise\nresponse.data = api_result\nreturn response\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGBase.wait_for_task","title":"wait_for_task","text":"<pre><code>wait_for_task(task_res: Union[int, FMGResponse], callback: Callable[[int, str], None] = None, timeout: int = 60, loop_interval: int = 2) -&gt; Union[str, None]\n</code></pre> <p>Wait for task to finish</p> <p>Parameters:</p> Name Type Description Default <code>task_res</code> <code>Union[int, FMGResponse]</code> <p>(int, FMGResponse): Task or task ID to check</p> required <code>callback</code> <code>Callable[[int, str], None]</code> <p>(Callable[[int, str], None]): function to call in each iteration.                               It must accept 2 args which are the current percentage and latest log line</p> <code>None</code> <code>timeout</code> <code>int</code> <p>(int): timeout for waiting</p> <code>60</code> <code>loop_interval</code> <code>int</code> <p>(int): interval between task status updates</p> <code>2</code> Example <pre><code>&gt;&gt;&gt; from pyfortinet.fmg_api.dvmcmd import DeviceTask\n&gt;&gt;&gt; from pyfortinet.fmg_api.dvmdb import RealDevice\n&gt;&gt;&gt; from rich.progress import Progress\n&gt;&gt;&gt; settings = {...}\n&gt;&gt;&gt; device = RealDevice(name=\"test\", ip=\"1.1.1.1\", adm_usr=\"test\", adm_pass=\"&lt;PASSWORD&gt;\")\n&gt;&gt;&gt; with FMGBase(**settings) as fmg:\n...     task = DeviceTask(adom=fmg.adom, device=device)\n...     result = fmg.exec(task)\n...     with Progress() as progress:\n...         prog_task = progress.add_task(f\"Adding device {device.name}\", total=100)\n...         update_progress = lambda percent, log: progress.update(prog_task, percent)\n...         result.wait_for_task(task, callback=update_progress)\n</code></pre> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def wait_for_task(\nself,\ntask_res: Union[int, FMGResponse],\ncallback: Callable[[int, str], None] = None,\ntimeout: int = 60,\nloop_interval: int = 2,\n) -&gt; Union[str, None]:\n\"\"\"Wait for task to finish\n    Args:\n        task_res: (int, FMGResponse): Task or task ID to check\n        callback: (Callable[[int, str], None]): function to call in each iteration.\n                                          It must accept 2 args which are the current percentage and latest log line\n        timeout: (int): timeout for waiting\n        loop_interval: (int): interval between task status updates\n    Example:\n        ```pycon\n        &gt;&gt;&gt; from pyfortinet.fmg_api.dvmcmd import DeviceTask\n        &gt;&gt;&gt; from pyfortinet.fmg_api.dvmdb import RealDevice\n        &gt;&gt;&gt; from rich.progress import Progress\n        &gt;&gt;&gt; settings = {...}\n        &gt;&gt;&gt; device = RealDevice(name=\"test\", ip=\"1.1.1.1\", adm_usr=\"test\", adm_pass=\"&lt;PASSWORD&gt;\")\n        &gt;&gt;&gt; with FMGBase(**settings) as fmg:\n        ...     task = DeviceTask(adom=fmg.adom, device=device)\n        ...     result = fmg.exec(task)\n        ...     with Progress() as progress:\n        ...         prog_task = progress.add_task(f\"Adding device {device.name}\", total=100)\n        ...         update_progress = lambda percent, log: progress.update(prog_task, percent)\n        ...         result.wait_for_task(task, callback=update_progress)\n        ```\n    \"\"\"\ntask_id = (\ntask_res\nif isinstance(task_res, int)\nelse (task_res.data.get(\"data\", {}).get(\"taskid\") or task_res.data.get(\"data\", {}).get(\"task\"))\n)\nif task_id is None:\nreturn\nstart_time = time.time()\nwhile True:\ntask: Task = self.get(Task, F(id=task_id)).first()\nif not task:\nreturn\nif time.time() - start_time &gt; timeout:\nraise TimeoutError(f\"Timed out waiting {timeout} seconds for the task {task.id}!\")\nif callable(callback):\ncallback(task.percent, task.line[-1].detail if task.line else \"\")\n# exit on the following states\nif task.state in [\"cancelled\", \"done\", \"error\", \"aborted\", \"to_continue\", \"unknown\"]:\nreturn task.state\ntime.sleep(loop_interval)\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext","title":"FMGLockContext","text":"<pre><code>FMGLockContext(fmg: FMGBase)\n</code></pre> <p>Lock FMG workspace</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def __init__(self, fmg: \"FMGBase\"):\nself._fmg = fmg\nself._locked_adoms = set()\nself._uses_workspace = False\nself._uses_adoms = False\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.locked_adoms","title":"locked_adoms  <code>property</code>","text":"<pre><code>locked_adoms: set[str]\n</code></pre> <p>returns locked adom set</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.uses_workspace","title":"uses_workspace  <code>property</code>","text":"<pre><code>uses_workspace: bool\n</code></pre> <p>returns workspace usage</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.check_mode","title":"check_mode","text":"<pre><code>check_mode()\n</code></pre> <p>Get workspace-mode from config</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def check_mode(self):\n\"\"\"Get workspace-mode from config\"\"\"\nurl = \"/cli/global/system/global\"\nresult = self._fmg.get({\"url\": url, \"fields\": [\"workspace-mode\", \"adom-status\"]})\nself._uses_workspace = result.data[\"data\"].get(\"workspace-mode\") != 0\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.commit_changes","title":"commit_changes","text":"<pre><code>commit_changes(adoms: Optional[list] = None, aux: bool = False) -&gt; list[FMGResponse]\n</code></pre> <p>Apply workspace changes in the DB</p> <p>Parameters:</p> Name Type Description Default <code>adoms</code> <code>Optional[list]</code> <p>list of ADOMs to commit. If empty, commit ALL ADOMs.</p> <code>None</code> <code>aux</code> <code>bool</code> <code>False</code> <p>Returns:</p> Type Description <code>list[FMGResponse]</code> <p>List of response of operations</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def commit_changes(self, adoms: Optional[list] = None, aux: bool = False) -&gt; list[FMGResponse]:\n\"\"\"Apply workspace changes in the DB\n    Args:\n        adoms: list of ADOMs to commit. If empty, commit ALL ADOMs.\n        aux:\n    Returns:\n        (list[FMGResponse]): List of response of operations\n    \"\"\"\nresults = []\nif not adoms:\nadoms = self._locked_adoms\nfor adom in adoms:\nif aux:\nurl = f\"/pm/config/adom/{adom}/workspace/commit\"\nelif adom.lower() == \"global\":\nurl = \"/dvmdb/global/workspace/commit/\"\nelse:\nurl = f\"/dvmdb/adom/{adom}/workspace/commit\"\nresults.append(self._fmg.exec({\"url\": url}))\nreturn results\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.lock_adoms","title":"lock_adoms","text":"<pre><code>lock_adoms(*adoms: str) -&gt; FMGResponse\n</code></pre> <p>Lock adom list</p> <p>If no adom specified, global workspace will be locked</p> <p>Parameters:</p> Name Type Description Default <code>*adoms</code> <code>str</code> <p>list of adom names</p> <code>()</code> <p>Returns:</p> Type Description <code>FMGResponse</code> <p>Response object</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def lock_adoms(self, *adoms: str) -&gt; FMGResponse:\n\"\"\"Lock adom list\n    If no adom specified, global workspace will be locked\n    Args:\n        *adoms (str): list of adom names\n    Returns:\n        Response object\n    \"\"\"\nresult = FMGResponse(fmg=self._fmg)\nif not adoms:\nadoms = [\"root\"]\nfor adom in adoms:\nurl = \"/dvmdb/global/workspace/lock/\" if adom.lower() == \"global\" else f\"/dvmdb/adom/{adom}/workspace/lock/\"\nresult.data.update({adom: self._fmg.exec(request={\"url\": url})})\nif result.data[adom].data.get(\"error\"):\nraise FMGLockException(result.data[adom].data)\nself._locked_adoms.add(adom)\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGLockContext.unlock_adoms","title":"unlock_adoms","text":"<pre><code>unlock_adoms(*adoms) -&gt; FMGResponse\n</code></pre> <p>unlock ADOMs</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def unlock_adoms(self, *adoms) -&gt; FMGResponse:\n\"\"\"unlock ADOMs\"\"\"\nresult = FMGResponse(fmg=self._fmg)\nif not adoms:\nadoms = copy(self._locked_adoms)\nfor adom in adoms:\nif adom.lower() == \"global\":\nurl = \"/dvmdb/global/workspace/unlock/\"\nelse:\nurl = f\"/dvmdb/adom/{adom}/workspace/unlock/\"\nresult.data.update({adom: self._fmg.exec(request={\"url\": url})})\nif not result.data[adom].data.get(\"error\"):\nself._locked_adoms.remove(adom)\nif self._locked_adoms:\nraise FMGException(f\"Failed to unlock ADOMs: {self._locked_adoms}\")\nreturn result\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGResponse","title":"FMGResponse  <code>dataclass</code>","text":"<pre><code>FMGResponse(data: Union[dict, List[FMGObject]] = dict(), status: int = 0, success: bool = False, fmg: FMGBase = None)\n</code></pre> <p>Response to a request</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>dict | List[FMGObject]</code> <p>response data</p> <code>status</code> <code>int</code> <p>status code</p> <code>success</code> <code>bool</code> <p>True on success</p>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.FMGResponse.first","title":"first","text":"<pre><code>first() -&gt; Optional[Union[FMGObject, dict]]\n</code></pre> <p>Return first data or None if result is empty</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def first(self) -&gt; Optional[Union[FMGObject, dict]]:\n\"\"\"Return first data or None if result is empty\"\"\"\nif isinstance(self.data, dict):\nif isinstance(self.data.get(\"data\"), list):\nreturn self.data.get(\"data\")[0] if self.data.get(\"data\") else None\nelse:\nreturn self.data.get(\"data\")\nelif isinstance(self.data, list) and self.data:  # non-empty list\nreturn self.data[0]\nreturn None\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.auth_required","title":"auth_required","text":"<pre><code>auth_required(func: Callable) -&gt; Callable\n</code></pre> <p>Decorator to provide authentication for the method</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to handle authentication errors</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>function with authentication handling enabled</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def auth_required(func: Callable) -&gt; Callable:\n\"\"\"Decorator to provide authentication for the method\n    Args:\n        func: function to handle authentication errors\n    Returns:\n        (Callable): function with authentication handling enabled\n    \"\"\"\n@functools.wraps(func)\ndef auth_decorated(self: Union[dict, \"FMGBase\"] = None, *args, **kwargs):\n\"\"\"method which needs authentication\"\"\"\nif not self._token:\nraise FMGTokenException(\"No token was obtained. Open connection first!\")\ntry:\nreturn func(self, *args, **kwargs)\nexcept FMGAuthenticationException as err:\ntry:  # try again after refreshing token\nself._token = self._get_token()\nreturn func(self, *args, **kwargs)\nexcept FMGException as err2:\nraise err2 from err\nreturn auth_decorated\n</code></pre>"},{"location":"reference/fmg_api/fmgbase/#fmg_api.fmgbase.lock","title":"lock","text":"<pre><code>lock(func: Callable) -&gt; Callable\n</code></pre> <p>Decorator to provide ADOM locking if needed</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>function to handle errors complaining about no locking</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>function with lock handling enabled</p> Source code in <code>pyfortinet/fmg_api/fmgbase.py</code> <pre><code>def lock(func: Callable) -&gt; Callable:\n\"\"\"Decorator to provide ADOM locking if needed\n    Args:\n        func: function to handle errors complaining about no locking\n    Returns:\n        (Callable): function with lock handling enabled\n    \"\"\"\n@functools.wraps(func)\ndef lock_decorated(self: \"FMGBase\" = None, *args, **kwargs):\n\"\"\"method which needs locking\"\"\"\ntry:\nreturn func(self, *args, **kwargs)\nexcept FMGLockNeededException as err:\ntry:  # try again after locking\nif not args:  # in case we got kwargs request\nargs = [kwargs.get(\"request\")]\ndel kwargs[\"request\"]\n# args[0] is the request dict or obj\nif isinstance(args[0], dict):\nurl = args[0].get(\"url\")\nadom_match = re.search(r\"/(?P&lt;adom&gt;global|(?&lt;=adom/)\\w+)/\", url)\nif adom_match:\nadom = adom_match.group(\"adom\")\nelse:\nraise FMGException(f\"No ADOM found to lock in url '{url}'\") from err\nelse:\nadom = args[0].fmg_scope\nif adom not in self.lock.locked_adoms:\nself.lock(adom)\nelse:  # ADOM already locked, do not try to lock it again\nraise\nreturn func(self, *args, **kwargs)\nexcept FMGException as err2:\nraise err2 from err\nreturn lock_decorated\n</code></pre>"},{"location":"reference/fmg_api/pm_config_cli/","title":"pm_config_cli","text":"<p>CLI template operations</p>"},{"location":"reference/fmg_api/pm_config_cli/#fmg_api.pm_config_cli.GETS","title":"GETS  <code>module-attribute</code>","text":"<pre><code>GETS = {}\n</code></pre>"},{"location":"reference/fmg_api/policy/","title":"policy","text":"<p>Fortinet Policy object</p>"},{"location":"reference/fmg_api/policy/#fmg_api.policy.Action","title":"Action  <code>module-attribute</code>","text":"<pre><code>Action = Literal['deny', 'accept', 'ipsec', 'ssl-vpn', 'redirect', 'isolate']\n</code></pre>"},{"location":"reference/fmg_api/policy/#fmg_api.policy.Policy","title":"Policy","text":"<p>             Bases: <code>FMGObject</code></p>"},{"location":"reference/fmg_api/securityconsole/","title":"securityconsole","text":"<p>Security console API</p>"},{"location":"reference/fmg_api/securityconsole/#fmg_api.securityconsole.INSTALL_DEVICE_FLAGS","title":"INSTALL_DEVICE_FLAGS  <code>module-attribute</code>","text":"<pre><code>INSTALL_DEVICE_FLAGS = Literal['none', 'preview', 'auto_lock_ws']\n</code></pre>"},{"location":"reference/fmg_api/securityconsole/#fmg_api.securityconsole.InstallDeviceTask","title":"InstallDeviceTask","text":"<p>             Bases: <code>FMGExecObject</code></p> <p>Install device settings</p> <p>Attributes:</p> Name Type Description <code>adom</code> <code>str</code> <p>ADOM to use</p> <code>dev_rev_comments</code> <code>str</code> <p>Device revision comments</p> <code>flags</code> <code>List[INSTALL_DEVICE_FLAGS]</code> <p>flags for the task</p> <code>scope</code> <code>List[Scope]</code> <p>scopes for the task (e.g. group name or device with vdom)</p>"},{"location":"reference/fmg_api/task/","title":"task","text":"<p>Task</p>"},{"location":"reference/fmg_api/task/#fmg_api.task.TASK_SRC","title":"TASK_SRC  <code>module-attribute</code>","text":"<pre><code>TASK_SRC = Literal['device manager', 'security console', 'global object', 'config installation', 'script installation', 'check point', 'import objects', 'import interfaces and zones', 'import policy', 'ems policy', 'policy check', 'assignment', 'object assignment', 'cloning package', 'certificate enrollment', 'install objects', 'unknown', 'install device', 'fwm', 'integrity check', 'cloning policy block', 'import config', 'generate controllers']\n</code></pre>"},{"location":"reference/fmg_api/task/#fmg_api.task.TASK_STATE","title":"TASK_STATE  <code>module-attribute</code>","text":"<pre><code>TASK_STATE = Literal['pending', 'running', 'cancelling', 'cancelled', 'done', 'error', 'aborting', 'aborted', 'warning', 'to_continue', 'unknown']\n</code></pre>"},{"location":"reference/fmg_api/task/#fmg_api.task.Task","title":"Task","text":"<p>             Bases: <code>FMGObject</code></p> <p>Task class</p>"},{"location":"reference/fmg_api/task/#fmg_api.task.TaskLine","title":"TaskLine","text":"<p>             Bases: <code>FMGObject</code></p> <p>Task line object</p>"},{"location":"reference/fmg_api/task/#fmg_api.task.TaskLineHistory","title":"TaskLineHistory","text":"<p>             Bases: <code>FMGObject</code></p> <p>Task line history</p>"},{"location":"user_guide/howto/","title":"Howto Do ...","text":"<p>In the following examples it is assumed that the fmg connection object is already opened:</p> <pre><code>config = {\n\"base_url\": \"https://myfmg.com\",\n\"username\": \"myuser\",\n\"password\": \"verysecret\",\n\"adom\": \"root\",\n\"verify\": False\n}\nwith FMG(**config) as fmg:\n...\n</code></pre>"},{"location":"user_guide/howto/#create_new_objects","title":"Create new objects","text":"<p>There are more options using the high-level API:</p> <pre><code># create an object\nnew_addr = Address(name=\"server1\", subnet=\"1.1.1.1\")\n# the object is only created in memory. We need to add it to `fmg`\nresult = fmg.add(new_addr)\n# we can examine result to check if the operation was successful\nif result:  # same as result.success\nprint(f\"{new_addr.name} was successfully created\")\n</code></pre> <p>We can also call objects' fmg operation methods:</p> <pre><code># create an object and assign to `fmg`\nnew_addr = fmg.get_obj(Address(name=\"server1\", subnet=\"1.1.1.1\"))\n# then add it to fmg without using `fmg` directly\nresult = new_addr.add()\nif result:  # same as result.success\nprint(f\"{new_addr.name} was successfully created\")\n</code></pre>"},{"location":"user_guide/howto/#creating_deleting_dynamic_mapping","title":"Creating / deleting dynamic mapping","text":"<p>Creating mapping:</p> <pre><code># create a new object\nserver: Address = fmg.get_obj(Address(name=\"test-server\", subnet=\"10.0.0.1/32\"))\nfw: Device = fmg.get(Device).first()\n# create server object in FMG\nserver.add()\n# create a mapping to server object with the fw device and different IP\nserver.dynamic_mapping = Address(mapping__scope=fw.get_vdom_scope(\"root\"), subnet=\"2.2.2.2\")\n# beware that FMG will convert this single element to a list!\nserver.update()\nserver = fmg.get(Address, F(name=server.name))\n# dynamic_mapping became list!\nprint(server.dynamic_mapping[0].subnet)\n</code></pre> <p>Deleting mapping:</p> <pre><code>del server.dynamic_mapping[0]\nserver.update()\nserver = fmg.get(Address, F(name=server.name))\n# this should print empty output\nprint(server.dynamic_mapping)\n</code></pre>"},{"location":"user_guide/installation/","title":"Installation","text":""},{"location":"user_guide/installation/#installing_package","title":"Installing package","text":"<p>Released versions can be installed from pypi.org by using the <code>pip</code>. It all depends on the environment, but it's advisable to create a separate venv for the tool. Reason is that it's heavily depending on Pydantic 2, which is not straight back compatible with Pydantic 1. If a system uses Pydantic 1, installing this tool can break things.</p> <pre><code># create a venv in local directory 'fmgsync'\n$ python -m venv fortinet\n# activate venv in linux\n$ . fortinet/bin/activate\n# same on windows\n&gt; fortinet/Script/activate\n# update environment\n(fortinet)$ python -m pip install -U pip\n# install tool with all features\n(fortinet)$ python -m pip install pyfortinet[rich]\n</code></pre>"},{"location":"user_guide/installation/#installing_from_source","title":"Installing from source","text":"<p>The tool can be installed from GitHub</p> <pre><code># latest main branch\n$ pip install git+https://github.com/realvitya/pyfortinet.git\n# specific version tag\n$ pip install git+https://github.com/realvitya/pyfortinet.git@v1.0.0\n</code></pre> <p>If you want editor mode for development purposes, I recommend forking the project, cloning and installing it:</p> <pre><code># clone repo to local folder\n$ git clone https://github.com/{YOURACC}/pyfortinet\n# install repo in editor mode (changes will be reflected immediately)\n$ pip install -e ./pyfortinet[dev]\n</code></pre>"},{"location":"user_guide/quickstart/","title":"Quick Start Guide","text":""},{"location":"user_guide/quickstart/#installation","title":"Installation","text":"<p>In most cases installation via pip is the simplest and best way to install pyfortinet. See here for advanced installation details.</p> <pre><code>pip install pyfortinet\n</code></pre>"},{"location":"user_guide/quickstart/#a_simple_example_get_object","title":"A Simple Example (get object)","text":"<pre><code>from pyfortinet import FMG\nfrom pyfortinet.fmg_api.firewall import Address\nfrom pyfortinet.fmg_api.common import F\nconfig = {\n\"base_url\": \"https://myfmg.com\",\n\"username\": \"myuser\",\n\"password\": \"verysecret\",\n\"adom\": \"root\",\n\"verify\": False\n}\nwith FMG(**config) as fmg:\n# get exact address object from FMG\nserver2 = fmg.get(Address, F(name=\"server2\")).first()\nprint(server2.name)\n</code></pre>"},{"location":"user_guide/quickstart/#updating_existing_object","title":"Updating existing object","text":"<pre><code>from pyfortinet import FMG\nfrom pyfortinet.fmg_api.firewall import Address\nfrom pyfortinet.fmg_api.common import F\nconfig = {\n\"base_url\": \"https://myfmg.com\",\n\"username\": \"myuser\",\n\"password\": \"verysecret\",\n\"adom\": \"root\",\n\"verify\": False\n}\nwith FMG(**config) as fmg:\n# get exact address object from FMG\nserver = fmg.get(Address, F(name=\"server1\")).first()\nserver.subnet = \"10.1.1.1/24\"\nserver.update()\n</code></pre>"},{"location":"user_guide/quickstart/#filtering","title":"Filtering","text":"<p><code>F</code> filter function can be used to compile complex search filters. More examples can be found in the respective testing functions:</p> F filter examples <pre><code>\"\"\"Test offline classes and functions\"\"\"\nimport pytest\nfrom pyfortinet import FMGResponse, AsyncFMGResponse\nfrom pyfortinet.fmg_api.common import F, text_to_filter\nclass TestFilters:\ndef test_simple_filter(self):\nf = F(name=\"test_address\").generate()\nassert f == [\"name\", \"==\", \"test_address\"]\ndef test_negate_filter(self):\nf = (~F(name=\"test_address\")).generate()\nassert f == [\"!\", \"name\", \"==\", \"test_address\"]\ndef test_filter_with_more_values(self):\nf = F(member__in=[\"abc\", \"def\", \"ghi\"]).generate()\nassert f == [\"member\", \"in\", \"abc\", \"def\", \"ghi\"]\ndef test_filter_with_implicit_or(self):\nf = (F(name=\"test_address\") + F(name=\"test2_address\")).generate()\nassert f == [[\"name\", \"==\", \"test_address\"], [\"name\", \"==\", \"test2_address\"]]\ndef test_explicit_or_filters(self):\nf = (F(name=\"test_address\") | F(name=\"prod_address\")).generate()\nassert f == [[\"name\", \"==\", \"test_address\"], \"||\", [\"name\", \"==\", \"prod_address\"]]\ndef test_multiple_filters(self):\nf = (F(name=\"acceptance_address\") | F(name=\"test_address\") | F(name=\"prod_address\")).generate()\nassert f == [\n[[\"name\", \"==\", \"acceptance_address\"], \"||\", [\"name\", \"==\", \"test_address\"]],\n\"||\",\n[\"name\", \"==\", \"prod_address\"],\n]\ndef test_filters_with_parentheses(self):\nf = (F(name=\"acceptance_address\") | (F(name=\"test_address\") | F(name=\"prod_address\"))).generate()\nassert f == [\n[\"name\", \"==\", \"acceptance_address\"],\n\"||\",\n[[\"name\", \"==\", \"test_address\"], \"||\", [\"name\", \"==\", \"prod_address\"]],\n]\ndef test_filters_with_parentheses2(self):\nf = ((F(name=\"acceptance_address\") | F(name=\"test_address\")) &amp; F(state=1)).generate()\nassert f == [\n[[\"name\", \"==\", \"acceptance_address\"], \"||\", [\"name\", \"==\", \"test_address\"]],\n\"&amp;&amp;\",\n[\"state\", \"==\", 1],\n]\ndef test_and_filters(self):\nf = (F(name__like=\"test%\") &amp; F(interface=\"port1\")).generate()\nassert f == [[\"name\", \"like\", \"test%\"], \"&amp;&amp;\", [\"interface\", \"==\", \"port1\"]]\ndef test_complex_filter(self):\nf = ((F(name=\"root\") + F(name=\"rootp\")) &amp; (F(status=1) + F(status=2))).generate()\nassert f == [\n[[\"name\", \"==\", \"root\"], [\"name\", \"==\", \"rootp\"]],\n\"&amp;&amp;\",\n[[\"status\", \"==\", 1], [\"status\", \"==\", 2]],\n]\ndef test_first_good(self):\nresponse = FMGResponse(data={\"data\": [\"response1\", \"response2\"]})\nassert response.first() == \"response1\"\ndef test_first_empty(self):\nresponse = FMGResponse()\nassert response.first() is None\ndef test_first_good_async(self):\nresponse = AsyncFMGResponse(data={\"data\": [\"response1\", \"response2\"]})\nassert response.first() == \"response1\"\ndef test_first_empty_async(self):\nresponse = AsyncFMGResponse()\nassert response.first() is None\ndef test_text_to_filter(self):\nassert text_to_filter(\"name like test%\").generate() == [\"name\", \"like\", \"test%\"]\nassert text_to_filter(\"~name like host_%\").generate() == [\"!\", \"name\", \"like\", \"host_%\"]\nassert text_to_filter(\"name eq host_1 and conf_status eq insync\").generate() == [\n[\"name\", \"==\", \"host_1\"],\n\"&amp;&amp;\",\n[\"conf_status\", \"==\", \"insync\"],\n]\n</code></pre> Short examples<pre><code>from pyfortinet import FMG\nfrom pyfortinet.fmg_api.firewall import Address\nfrom pyfortinet.fmg_api.dvmdb import Device\nfrom pyfortinet.fmg_api.common import F\nconfig = {\n\"base_url\": \"https://myfmg.com\",\n\"username\": \"myuser\",\n\"password\": \"verysecret\",\n\"adom\": \"root\",\n\"verify\": False\n}\nwith FMG(**config) as fmg:\n# simple 'or'\nserver1_and_2 = fmg.get(Address, F(name=\"server1\") + F(name=\"server2\")).data\n# list devices with name dc-fw-* which connection status is not up\nfirewalls = fmg.get(Device, F(name__like=\"dc-fw-%\") &amp; ~F(conn_status=\"up\")).data\n</code></pre>"},{"location":"user_guide/quickstart/#task_run","title":"Task run","text":"<p>Exec objects are called Tasks. These have extra functionality like waiting. This is an example of running device settings installation on devices with modified config status:</p> <pre><code>from pyfortinet import FMG\nfrom pyfortinet.fmg_api.common import Scope\nfrom pyfortinet.fmg_api.dvmdb import Device\nfrom pyfortinet.fmg_api.common import F\nconfig = {\n\"base_url\": \"https://myfmg.com\",\n\"username\": \"myuser\",\n\"password\": \"verysecret\",\n\"adom\": \"root\",\n\"verify\": False\n}\nwith FMG(**config) as fmg:\ndevices: List[Device] = fmg.get(Device, conf_status=\"mod\").data\n# for simplicity, assume all device is single mode\ntask: InstallDeviceTask = fmg.get_obj(\nInstallDeviceTask, adom=fmg.adom, scope=[Scope(name=test_device.name, vdom=\"root\")], flags=[\"auto_lock_ws\"]\n)\nresult: FMGResponse = task.exec()\n# block here until task is done. Print task percentage and log in the meanwhile\nresult.wait_for_task(callback=lambda percent, log: print(f\"Task at {percent}%: {log}\"))\n</code></pre>"}]}